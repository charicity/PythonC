// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_data_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_data_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_data_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_data_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_data_2eproto;
class ArrayDouble;
class ArrayDoubleDefaultTypeInternal;
extern ArrayDoubleDefaultTypeInternal _ArrayDouble_default_instance_;
class ArrayInt64;
class ArrayInt64DefaultTypeInternal;
extern ArrayInt64DefaultTypeInternal _ArrayInt64_default_instance_;
class ArrayString;
class ArrayStringDefaultTypeInternal;
extern ArrayStringDefaultTypeInternal _ArrayString_default_instance_;
class ArrayUint64;
class ArrayUint64DefaultTypeInternal;
extern ArrayUint64DefaultTypeInternal _ArrayUint64_default_instance_;
class ArrayValue;
class ArrayValueDefaultTypeInternal;
extern ArrayValueDefaultTypeInternal _ArrayValue_default_instance_;
class MapString;
class MapStringDefaultTypeInternal;
extern MapStringDefaultTypeInternal _MapString_default_instance_;
class MapString_DataEntry_DoNotUse;
class MapString_DataEntry_DoNotUseDefaultTypeInternal;
extern MapString_DataEntry_DoNotUseDefaultTypeInternal _MapString_DataEntry_DoNotUse_default_instance_;
class MatchRuleReq;
class MatchRuleReqDefaultTypeInternal;
extern MatchRuleReqDefaultTypeInternal _MatchRuleReq_default_instance_;
class MatchRuleReq_ContextMapEntry_DoNotUse;
class MatchRuleReq_ContextMapEntry_DoNotUseDefaultTypeInternal;
extern MatchRuleReq_ContextMapEntry_DoNotUseDefaultTypeInternal _MatchRuleReq_ContextMapEntry_DoNotUse_default_instance_;
class context_value;
class context_valueDefaultTypeInternal;
extern context_valueDefaultTypeInternal _context_value_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ArrayDouble* Arena::CreateMaybeMessage<::ArrayDouble>(Arena*);
template<> ::ArrayInt64* Arena::CreateMaybeMessage<::ArrayInt64>(Arena*);
template<> ::ArrayString* Arena::CreateMaybeMessage<::ArrayString>(Arena*);
template<> ::ArrayUint64* Arena::CreateMaybeMessage<::ArrayUint64>(Arena*);
template<> ::ArrayValue* Arena::CreateMaybeMessage<::ArrayValue>(Arena*);
template<> ::MapString* Arena::CreateMaybeMessage<::MapString>(Arena*);
template<> ::MapString_DataEntry_DoNotUse* Arena::CreateMaybeMessage<::MapString_DataEntry_DoNotUse>(Arena*);
template<> ::MatchRuleReq* Arena::CreateMaybeMessage<::MatchRuleReq>(Arena*);
template<> ::MatchRuleReq_ContextMapEntry_DoNotUse* Arena::CreateMaybeMessage<::MatchRuleReq_ContextMapEntry_DoNotUse>(Arena*);
template<> ::context_value* Arena::CreateMaybeMessage<::context_value>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ArrayInt64 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ArrayInt64) */ {
 public:
  inline ArrayInt64() : ArrayInt64(nullptr) {};
  virtual ~ArrayInt64();

  ArrayInt64(const ArrayInt64& from);
  ArrayInt64(ArrayInt64&& from) noexcept
    : ArrayInt64() {
    *this = ::std::move(from);
  }

  inline ArrayInt64& operator=(const ArrayInt64& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArrayInt64& operator=(ArrayInt64&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArrayInt64& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArrayInt64* internal_default_instance() {
    return reinterpret_cast<const ArrayInt64*>(
               &_ArrayInt64_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ArrayInt64& a, ArrayInt64& b) {
    a.Swap(&b);
  }
  inline void Swap(ArrayInt64* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArrayInt64* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArrayInt64* New() const final {
    return CreateMaybeMessage<ArrayInt64>(nullptr);
  }

  ArrayInt64* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArrayInt64>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArrayInt64& from);
  void MergeFrom(const ArrayInt64& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArrayInt64* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ArrayInt64";
  }
  protected:
  explicit ArrayInt64(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_2eproto);
    return ::descriptor_table_data_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated int64 data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_data() const;
  void _internal_add_data(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_data();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 data(int index) const;
  void set_data(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_data(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:ArrayInt64)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class ArrayUint64 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ArrayUint64) */ {
 public:
  inline ArrayUint64() : ArrayUint64(nullptr) {};
  virtual ~ArrayUint64();

  ArrayUint64(const ArrayUint64& from);
  ArrayUint64(ArrayUint64&& from) noexcept
    : ArrayUint64() {
    *this = ::std::move(from);
  }

  inline ArrayUint64& operator=(const ArrayUint64& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArrayUint64& operator=(ArrayUint64&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArrayUint64& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArrayUint64* internal_default_instance() {
    return reinterpret_cast<const ArrayUint64*>(
               &_ArrayUint64_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ArrayUint64& a, ArrayUint64& b) {
    a.Swap(&b);
  }
  inline void Swap(ArrayUint64* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArrayUint64* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArrayUint64* New() const final {
    return CreateMaybeMessage<ArrayUint64>(nullptr);
  }

  ArrayUint64* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArrayUint64>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArrayUint64& from);
  void MergeFrom(const ArrayUint64& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArrayUint64* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ArrayUint64";
  }
  protected:
  explicit ArrayUint64(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_2eproto);
    return ::descriptor_table_data_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated uint64 data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_data() const;
  void _internal_add_data(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_data();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 data(int index) const;
  void set_data(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_data(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:ArrayUint64)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class ArrayDouble PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ArrayDouble) */ {
 public:
  inline ArrayDouble() : ArrayDouble(nullptr) {};
  virtual ~ArrayDouble();

  ArrayDouble(const ArrayDouble& from);
  ArrayDouble(ArrayDouble&& from) noexcept
    : ArrayDouble() {
    *this = ::std::move(from);
  }

  inline ArrayDouble& operator=(const ArrayDouble& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArrayDouble& operator=(ArrayDouble&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArrayDouble& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArrayDouble* internal_default_instance() {
    return reinterpret_cast<const ArrayDouble*>(
               &_ArrayDouble_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ArrayDouble& a, ArrayDouble& b) {
    a.Swap(&b);
  }
  inline void Swap(ArrayDouble* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArrayDouble* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArrayDouble* New() const final {
    return CreateMaybeMessage<ArrayDouble>(nullptr);
  }

  ArrayDouble* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArrayDouble>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArrayDouble& from);
  void MergeFrom(const ArrayDouble& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArrayDouble* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ArrayDouble";
  }
  protected:
  explicit ArrayDouble(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_2eproto);
    return ::descriptor_table_data_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated double data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  double _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_data() const;
  void _internal_add_data(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_data();
  public:
  double data(int index) const;
  void set_data(int index, double value);
  void add_data(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:ArrayDouble)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class ArrayString PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ArrayString) */ {
 public:
  inline ArrayString() : ArrayString(nullptr) {};
  virtual ~ArrayString();

  ArrayString(const ArrayString& from);
  ArrayString(ArrayString&& from) noexcept
    : ArrayString() {
    *this = ::std::move(from);
  }

  inline ArrayString& operator=(const ArrayString& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArrayString& operator=(ArrayString&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArrayString& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArrayString* internal_default_instance() {
    return reinterpret_cast<const ArrayString*>(
               &_ArrayString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ArrayString& a, ArrayString& b) {
    a.Swap(&b);
  }
  inline void Swap(ArrayString* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArrayString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArrayString* New() const final {
    return CreateMaybeMessage<ArrayString>(nullptr);
  }

  ArrayString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArrayString>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArrayString& from);
  void MergeFrom(const ArrayString& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArrayString* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ArrayString";
  }
  protected:
  explicit ArrayString(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_2eproto);
    return ::descriptor_table_data_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated string data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  const std::string& data(int index) const;
  std::string* mutable_data(int index);
  void set_data(int index, const std::string& value);
  void set_data(int index, std::string&& value);
  void set_data(int index, const char* value);
  void set_data(int index, const char* value, size_t size);
  std::string* add_data();
  void add_data(const std::string& value);
  void add_data(std::string&& value);
  void add_data(const char* value);
  void add_data(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data();
  private:
  const std::string& _internal_data(int index) const;
  std::string* _internal_add_data();
  public:

  // @@protoc_insertion_point(class_scope:ArrayString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class ArrayValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ArrayValue) */ {
 public:
  inline ArrayValue() : ArrayValue(nullptr) {};
  virtual ~ArrayValue();

  ArrayValue(const ArrayValue& from);
  ArrayValue(ArrayValue&& from) noexcept
    : ArrayValue() {
    *this = ::std::move(from);
  }

  inline ArrayValue& operator=(const ArrayValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArrayValue& operator=(ArrayValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArrayValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArrayValue* internal_default_instance() {
    return reinterpret_cast<const ArrayValue*>(
               &_ArrayValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ArrayValue& a, ArrayValue& b) {
    a.Swap(&b);
  }
  inline void Swap(ArrayValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArrayValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArrayValue* New() const final {
    return CreateMaybeMessage<ArrayValue>(nullptr);
  }

  ArrayValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArrayValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArrayValue& from);
  void MergeFrom(const ArrayValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArrayValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ArrayValue";
  }
  protected:
  explicit ArrayValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_2eproto);
    return ::descriptor_table_data_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .context_value data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::context_value* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::context_value >*
      mutable_data();
  private:
  const ::context_value& _internal_data(int index) const;
  ::context_value* _internal_add_data();
  public:
  const ::context_value& data(int index) const;
  ::context_value* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::context_value >&
      data() const;

  // @@protoc_insertion_point(class_scope:ArrayValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::context_value > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class MapString_DataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MapString_DataEntry_DoNotUse, 
    std::string, ::context_value,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MapString_DataEntry_DoNotUse, 
    std::string, ::context_value,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  MapString_DataEntry_DoNotUse();
  MapString_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MapString_DataEntry_DoNotUse& other);
  static const MapString_DataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MapString_DataEntry_DoNotUse*>(&_MapString_DataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "MapString.DataEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_2eproto);
    return ::descriptor_table_data_2eproto.file_level_metadata[5];
  }

  public:
};

// -------------------------------------------------------------------

class MapString PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MapString) */ {
 public:
  inline MapString() : MapString(nullptr) {};
  virtual ~MapString();

  MapString(const MapString& from);
  MapString(MapString&& from) noexcept
    : MapString() {
    *this = ::std::move(from);
  }

  inline MapString& operator=(const MapString& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapString& operator=(MapString&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapString& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapString* internal_default_instance() {
    return reinterpret_cast<const MapString*>(
               &_MapString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MapString& a, MapString& b) {
    a.Swap(&b);
  }
  inline void Swap(MapString* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapString* New() const final {
    return CreateMaybeMessage<MapString>(nullptr);
  }

  MapString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapString>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapString& from);
  void MergeFrom(const MapString& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapString* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MapString";
  }
  protected:
  explicit MapString(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_2eproto);
    return ::descriptor_table_data_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // map<string, .context_value> data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::context_value >&
      _internal_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::context_value >*
      _internal_mutable_data();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::context_value >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::context_value >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:MapString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MapString_DataEntry_DoNotUse,
      std::string, ::context_value,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class context_value PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:context_value) */ {
 public:
  inline context_value() : context_value(nullptr) {};
  virtual ~context_value();

  context_value(const context_value& from);
  context_value(context_value&& from) noexcept
    : context_value() {
    *this = ::std::move(from);
  }

  inline context_value& operator=(const context_value& from) {
    CopyFrom(from);
    return *this;
  }
  inline context_value& operator=(context_value&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const context_value& default_instance();

  enum ValueTypeCase {
    kBool = 1,
    kFloat = 2,
    kDouble = 3,
    kUint32 = 4,
    kUint64 = 5,
    kInt32 = 6,
    kInt64 = 7,
    kSint32 = 8,
    kSint64 = 9,
    kFixed32 = 10,
    kFixed64 = 11,
    kSfixed32 = 12,
    kSfixed64 = 13,
    kString = 14,
    kBytes = 15,
    kArrayInt64 = 16,
    kArrayUint64 = 17,
    kArrayDouble = 18,
    kArrayString = 19,
    kArrayValue = 20,
    kMapString = 21,
    VALUE_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const context_value* internal_default_instance() {
    return reinterpret_cast<const context_value*>(
               &_context_value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(context_value& a, context_value& b) {
    a.Swap(&b);
  }
  inline void Swap(context_value* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(context_value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline context_value* New() const final {
    return CreateMaybeMessage<context_value>(nullptr);
  }

  context_value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<context_value>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const context_value& from);
  void MergeFrom(const context_value& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(context_value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "context_value";
  }
  protected:
  explicit context_value(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_2eproto);
    return ::descriptor_table_data_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoolFieldNumber = 1,
    kFloatFieldNumber = 2,
    kDoubleFieldNumber = 3,
    kUint32FieldNumber = 4,
    kUint64FieldNumber = 5,
    kInt32FieldNumber = 6,
    kInt64FieldNumber = 7,
    kSint32FieldNumber = 8,
    kSint64FieldNumber = 9,
    kFixed32FieldNumber = 10,
    kFixed64FieldNumber = 11,
    kSfixed32FieldNumber = 12,
    kSfixed64FieldNumber = 13,
    kStringFieldNumber = 14,
    kBytesFieldNumber = 15,
    kArrayInt64FieldNumber = 16,
    kArrayUint64FieldNumber = 17,
    kArrayDoubleFieldNumber = 18,
    kArrayStringFieldNumber = 19,
    kArrayValueFieldNumber = 20,
    kMapStringFieldNumber = 21,
  };
  // bool bool = 1;
  private:
  bool _internal_has_bool_() const;
  public:
  void clear_bool_();
  bool bool_() const;
  void set_bool_(bool value);
  private:
  bool _internal_bool_() const;
  void _internal_set_bool_(bool value);
  public:

  // float float = 2;
  private:
  bool _internal_has_float_() const;
  public:
  void clear_float_();
  float float_() const;
  void set_float_(float value);
  private:
  float _internal_float_() const;
  void _internal_set_float_(float value);
  public:

  // double double = 3;
  private:
  bool _internal_has_double_() const;
  public:
  void clear_double_();
  double double_() const;
  void set_double_(double value);
  private:
  double _internal_double_() const;
  void _internal_set_double_(double value);
  public:

  // uint32 uint32 = 4;
  private:
  bool _internal_has_uint32() const;
  public:
  void clear_uint32();
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32() const;
  void set_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uint32() const;
  void _internal_set_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 uint64 = 5;
  private:
  bool _internal_has_uint64() const;
  public:
  void clear_uint64();
  ::PROTOBUF_NAMESPACE_ID::uint64 uint64() const;
  void set_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uint64() const;
  void _internal_set_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 int32 = 6;
  private:
  bool _internal_has_int32() const;
  public:
  void clear_int32();
  ::PROTOBUF_NAMESPACE_ID::int32 int32() const;
  void set_int32(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int32() const;
  void _internal_set_int32(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 int64 = 7;
  private:
  bool _internal_has_int64() const;
  public:
  void clear_int64();
  ::PROTOBUF_NAMESPACE_ID::int64 int64() const;
  void set_int64(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_int64() const;
  void _internal_set_int64(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // sint32 sint32 = 8;
  private:
  bool _internal_has_sint32() const;
  public:
  void clear_sint32();
  ::PROTOBUF_NAMESPACE_ID::int32 sint32() const;
  void set_sint32(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sint32() const;
  void _internal_set_sint32(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint64 sint64 = 9;
  private:
  bool _internal_has_sint64() const;
  public:
  void clear_sint64();
  ::PROTOBUF_NAMESPACE_ID::int64 sint64() const;
  void set_sint64(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sint64() const;
  void _internal_set_sint64(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // fixed32 fixed32 = 10;
  private:
  bool _internal_has_fixed32() const;
  public:
  void clear_fixed32();
  ::PROTOBUF_NAMESPACE_ID::uint32 fixed32() const;
  void set_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fixed32() const;
  void _internal_set_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // fixed64 fixed64 = 11;
  private:
  bool _internal_has_fixed64() const;
  public:
  void clear_fixed64();
  ::PROTOBUF_NAMESPACE_ID::uint64 fixed64() const;
  void set_fixed64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fixed64() const;
  void _internal_set_fixed64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // sfixed32 sfixed32 = 12;
  private:
  bool _internal_has_sfixed32() const;
  public:
  void clear_sfixed32();
  ::PROTOBUF_NAMESPACE_ID::int32 sfixed32() const;
  void set_sfixed32(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sfixed32() const;
  void _internal_set_sfixed32(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sfixed64 sfixed64 = 13;
  private:
  bool _internal_has_sfixed64() const;
  public:
  void clear_sfixed64();
  ::PROTOBUF_NAMESPACE_ID::int64 sfixed64() const;
  void set_sfixed64(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sfixed64() const;
  void _internal_set_sfixed64(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // string string = 14;
  private:
  bool _internal_has_string() const;
  public:
  void clear_string();
  const std::string& string() const;
  void set_string(const std::string& value);
  void set_string(std::string&& value);
  void set_string(const char* value);
  void set_string(const char* value, size_t size);
  std::string* mutable_string();
  std::string* release_string();
  void set_allocated_string(std::string* string);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_string();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_string(
      std::string* string);
  private:
  const std::string& _internal_string() const;
  void _internal_set_string(const std::string& value);
  std::string* _internal_mutable_string();
  public:

  // bytes bytes = 15;
  private:
  bool _internal_has_bytes() const;
  public:
  void clear_bytes();
  const std::string& bytes() const;
  void set_bytes(const std::string& value);
  void set_bytes(std::string&& value);
  void set_bytes(const char* value);
  void set_bytes(const void* value, size_t size);
  std::string* mutable_bytes();
  std::string* release_bytes();
  void set_allocated_bytes(std::string* bytes);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_bytes();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bytes(
      std::string* bytes);
  private:
  const std::string& _internal_bytes() const;
  void _internal_set_bytes(const std::string& value);
  std::string* _internal_mutable_bytes();
  public:

  // .ArrayInt64 array_int64 = 16;
  bool has_array_int64() const;
  private:
  bool _internal_has_array_int64() const;
  public:
  void clear_array_int64();
  const ::ArrayInt64& array_int64() const;
  ::ArrayInt64* release_array_int64();
  ::ArrayInt64* mutable_array_int64();
  void set_allocated_array_int64(::ArrayInt64* array_int64);
  private:
  const ::ArrayInt64& _internal_array_int64() const;
  ::ArrayInt64* _internal_mutable_array_int64();
  public:
  void unsafe_arena_set_allocated_array_int64(
      ::ArrayInt64* array_int64);
  ::ArrayInt64* unsafe_arena_release_array_int64();

  // .ArrayUint64 array_uint64 = 17;
  bool has_array_uint64() const;
  private:
  bool _internal_has_array_uint64() const;
  public:
  void clear_array_uint64();
  const ::ArrayUint64& array_uint64() const;
  ::ArrayUint64* release_array_uint64();
  ::ArrayUint64* mutable_array_uint64();
  void set_allocated_array_uint64(::ArrayUint64* array_uint64);
  private:
  const ::ArrayUint64& _internal_array_uint64() const;
  ::ArrayUint64* _internal_mutable_array_uint64();
  public:
  void unsafe_arena_set_allocated_array_uint64(
      ::ArrayUint64* array_uint64);
  ::ArrayUint64* unsafe_arena_release_array_uint64();

  // .ArrayDouble array_double = 18;
  bool has_array_double() const;
  private:
  bool _internal_has_array_double() const;
  public:
  void clear_array_double();
  const ::ArrayDouble& array_double() const;
  ::ArrayDouble* release_array_double();
  ::ArrayDouble* mutable_array_double();
  void set_allocated_array_double(::ArrayDouble* array_double);
  private:
  const ::ArrayDouble& _internal_array_double() const;
  ::ArrayDouble* _internal_mutable_array_double();
  public:
  void unsafe_arena_set_allocated_array_double(
      ::ArrayDouble* array_double);
  ::ArrayDouble* unsafe_arena_release_array_double();

  // .ArrayString array_string = 19;
  bool has_array_string() const;
  private:
  bool _internal_has_array_string() const;
  public:
  void clear_array_string();
  const ::ArrayString& array_string() const;
  ::ArrayString* release_array_string();
  ::ArrayString* mutable_array_string();
  void set_allocated_array_string(::ArrayString* array_string);
  private:
  const ::ArrayString& _internal_array_string() const;
  ::ArrayString* _internal_mutable_array_string();
  public:
  void unsafe_arena_set_allocated_array_string(
      ::ArrayString* array_string);
  ::ArrayString* unsafe_arena_release_array_string();

  // .ArrayValue array_value = 20;
  bool has_array_value() const;
  private:
  bool _internal_has_array_value() const;
  public:
  void clear_array_value();
  const ::ArrayValue& array_value() const;
  ::ArrayValue* release_array_value();
  ::ArrayValue* mutable_array_value();
  void set_allocated_array_value(::ArrayValue* array_value);
  private:
  const ::ArrayValue& _internal_array_value() const;
  ::ArrayValue* _internal_mutable_array_value();
  public:
  void unsafe_arena_set_allocated_array_value(
      ::ArrayValue* array_value);
  ::ArrayValue* unsafe_arena_release_array_value();

  // .MapString map_string = 21;
  bool has_map_string() const;
  private:
  bool _internal_has_map_string() const;
  public:
  void clear_map_string();
  const ::MapString& map_string() const;
  ::MapString* release_map_string();
  ::MapString* mutable_map_string();
  void set_allocated_map_string(::MapString* map_string);
  private:
  const ::MapString& _internal_map_string() const;
  ::MapString* _internal_mutable_map_string();
  public:
  void unsafe_arena_set_allocated_map_string(
      ::MapString* map_string);
  ::MapString* unsafe_arena_release_map_string();

  void clear_value_type();
  ValueTypeCase value_type_case() const;
  // @@protoc_insertion_point(class_scope:context_value)
 private:
  class _Internal;
  void set_has_bool_();
  void set_has_float_();
  void set_has_double_();
  void set_has_uint32();
  void set_has_uint64();
  void set_has_int32();
  void set_has_int64();
  void set_has_sint32();
  void set_has_sint64();
  void set_has_fixed32();
  void set_has_fixed64();
  void set_has_sfixed32();
  void set_has_sfixed64();
  void set_has_string();
  void set_has_bytes();
  void set_has_array_int64();
  void set_has_array_uint64();
  void set_has_array_double();
  void set_has_array_string();
  void set_has_array_value();
  void set_has_map_string();

  inline bool has_value_type() const;
  inline void clear_has_value_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ValueTypeUnion {
    ValueTypeUnion() {}
    bool bool__;
    float float__;
    double double__;
    ::PROTOBUF_NAMESPACE_ID::uint32 uint32_;
    ::PROTOBUF_NAMESPACE_ID::uint64 uint64_;
    ::PROTOBUF_NAMESPACE_ID::int32 int32_;
    ::PROTOBUF_NAMESPACE_ID::int64 int64_;
    ::PROTOBUF_NAMESPACE_ID::int32 sint32_;
    ::PROTOBUF_NAMESPACE_ID::int64 sint64_;
    ::PROTOBUF_NAMESPACE_ID::uint32 fixed32_;
    ::PROTOBUF_NAMESPACE_ID::uint64 fixed64_;
    ::PROTOBUF_NAMESPACE_ID::int32 sfixed32_;
    ::PROTOBUF_NAMESPACE_ID::int64 sfixed64_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_;
    ::ArrayInt64* array_int64_;
    ::ArrayUint64* array_uint64_;
    ::ArrayDouble* array_double_;
    ::ArrayString* array_string_;
    ::ArrayValue* array_value_;
    ::MapString* map_string_;
  } value_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class MatchRuleReq_ContextMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MatchRuleReq_ContextMapEntry_DoNotUse, 
    std::string, ::context_value,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MatchRuleReq_ContextMapEntry_DoNotUse, 
    std::string, ::context_value,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  MatchRuleReq_ContextMapEntry_DoNotUse();
  MatchRuleReq_ContextMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MatchRuleReq_ContextMapEntry_DoNotUse& other);
  static const MatchRuleReq_ContextMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MatchRuleReq_ContextMapEntry_DoNotUse*>(&_MatchRuleReq_ContextMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "MatchRuleReq.ContextMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_2eproto);
    return ::descriptor_table_data_2eproto.file_level_metadata[8];
  }

  public:
};

// -------------------------------------------------------------------

class MatchRuleReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MatchRuleReq) */ {
 public:
  inline MatchRuleReq() : MatchRuleReq(nullptr) {};
  virtual ~MatchRuleReq();

  MatchRuleReq(const MatchRuleReq& from);
  MatchRuleReq(MatchRuleReq&& from) noexcept
    : MatchRuleReq() {
    *this = ::std::move(from);
  }

  inline MatchRuleReq& operator=(const MatchRuleReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchRuleReq& operator=(MatchRuleReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MatchRuleReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatchRuleReq* internal_default_instance() {
    return reinterpret_cast<const MatchRuleReq*>(
               &_MatchRuleReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MatchRuleReq& a, MatchRuleReq& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchRuleReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchRuleReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MatchRuleReq* New() const final {
    return CreateMaybeMessage<MatchRuleReq>(nullptr);
  }

  MatchRuleReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatchRuleReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MatchRuleReq& from);
  void MergeFrom(const MatchRuleReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchRuleReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MatchRuleReq";
  }
  protected:
  explicit MatchRuleReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_2eproto);
    return ::descriptor_table_data_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kContextMapFieldNumber = 1,
  };
  // map<string, .context_value> context_map = 1;
  int context_map_size() const;
  private:
  int _internal_context_map_size() const;
  public:
  void clear_context_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::context_value >&
      _internal_context_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::context_value >*
      _internal_mutable_context_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::context_value >&
      context_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::context_value >*
      mutable_context_map();

  // @@protoc_insertion_point(class_scope:MatchRuleReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MatchRuleReq_ContextMapEntry_DoNotUse,
      std::string, ::context_value,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > context_map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ArrayInt64

// repeated int64 data = 1;
inline int ArrayInt64::_internal_data_size() const {
  return data_.size();
}
inline int ArrayInt64::data_size() const {
  return _internal_data_size();
}
inline void ArrayInt64::clear_data() {
  data_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ArrayInt64::_internal_data(int index) const {
  return data_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ArrayInt64::data(int index) const {
  // @@protoc_insertion_point(field_get:ArrayInt64.data)
  return _internal_data(index);
}
inline void ArrayInt64::set_data(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:ArrayInt64.data)
}
inline void ArrayInt64::_internal_add_data(::PROTOBUF_NAMESPACE_ID::int64 value) {
  data_.Add(value);
}
inline void ArrayInt64::add_data(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:ArrayInt64.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ArrayInt64::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ArrayInt64::data() const {
  // @@protoc_insertion_point(field_list:ArrayInt64.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ArrayInt64::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ArrayInt64::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ArrayInt64.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// ArrayUint64

// repeated uint64 data = 1;
inline int ArrayUint64::_internal_data_size() const {
  return data_.size();
}
inline int ArrayUint64::data_size() const {
  return _internal_data_size();
}
inline void ArrayUint64::clear_data() {
  data_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ArrayUint64::_internal_data(int index) const {
  return data_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ArrayUint64::data(int index) const {
  // @@protoc_insertion_point(field_get:ArrayUint64.data)
  return _internal_data(index);
}
inline void ArrayUint64::set_data(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:ArrayUint64.data)
}
inline void ArrayUint64::_internal_add_data(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  data_.Add(value);
}
inline void ArrayUint64::add_data(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:ArrayUint64.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ArrayUint64::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ArrayUint64::data() const {
  // @@protoc_insertion_point(field_list:ArrayUint64.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ArrayUint64::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ArrayUint64::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ArrayUint64.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// ArrayDouble

// repeated double data = 1;
inline int ArrayDouble::_internal_data_size() const {
  return data_.size();
}
inline int ArrayDouble::data_size() const {
  return _internal_data_size();
}
inline void ArrayDouble::clear_data() {
  data_.Clear();
}
inline double ArrayDouble::_internal_data(int index) const {
  return data_.Get(index);
}
inline double ArrayDouble::data(int index) const {
  // @@protoc_insertion_point(field_get:ArrayDouble.data)
  return _internal_data(index);
}
inline void ArrayDouble::set_data(int index, double value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:ArrayDouble.data)
}
inline void ArrayDouble::_internal_add_data(double value) {
  data_.Add(value);
}
inline void ArrayDouble::add_data(double value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:ArrayDouble.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ArrayDouble::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ArrayDouble::data() const {
  // @@protoc_insertion_point(field_list:ArrayDouble.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ArrayDouble::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ArrayDouble::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ArrayDouble.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// ArrayString

// repeated string data = 1;
inline int ArrayString::_internal_data_size() const {
  return data_.size();
}
inline int ArrayString::data_size() const {
  return _internal_data_size();
}
inline void ArrayString::clear_data() {
  data_.Clear();
}
inline std::string* ArrayString::add_data() {
  // @@protoc_insertion_point(field_add_mutable:ArrayString.data)
  return _internal_add_data();
}
inline const std::string& ArrayString::_internal_data(int index) const {
  return data_.Get(index);
}
inline const std::string& ArrayString::data(int index) const {
  // @@protoc_insertion_point(field_get:ArrayString.data)
  return _internal_data(index);
}
inline std::string* ArrayString::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:ArrayString.data)
  return data_.Mutable(index);
}
inline void ArrayString::set_data(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ArrayString.data)
  data_.Mutable(index)->assign(value);
}
inline void ArrayString::set_data(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ArrayString.data)
  data_.Mutable(index)->assign(std::move(value));
}
inline void ArrayString::set_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ArrayString.data)
}
inline void ArrayString::set_data(int index, const char* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ArrayString.data)
}
inline std::string* ArrayString::_internal_add_data() {
  return data_.Add();
}
inline void ArrayString::add_data(const std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ArrayString.data)
}
inline void ArrayString::add_data(std::string&& value) {
  data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ArrayString.data)
}
inline void ArrayString::add_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ArrayString.data)
}
inline void ArrayString::add_data(const char* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ArrayString.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ArrayString::data() const {
  // @@protoc_insertion_point(field_list:ArrayString.data)
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ArrayString::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ArrayString.data)
  return &data_;
}

// -------------------------------------------------------------------

// ArrayValue

// repeated .context_value data = 1;
inline int ArrayValue::_internal_data_size() const {
  return data_.size();
}
inline int ArrayValue::data_size() const {
  return _internal_data_size();
}
inline void ArrayValue::clear_data() {
  data_.Clear();
}
inline ::context_value* ArrayValue::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:ArrayValue.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::context_value >*
ArrayValue::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ArrayValue.data)
  return &data_;
}
inline const ::context_value& ArrayValue::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::context_value& ArrayValue::data(int index) const {
  // @@protoc_insertion_point(field_get:ArrayValue.data)
  return _internal_data(index);
}
inline ::context_value* ArrayValue::_internal_add_data() {
  return data_.Add();
}
inline ::context_value* ArrayValue::add_data() {
  // @@protoc_insertion_point(field_add:ArrayValue.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::context_value >&
ArrayValue::data() const {
  // @@protoc_insertion_point(field_list:ArrayValue.data)
  return data_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MapString

// map<string, .context_value> data = 1;
inline int MapString::_internal_data_size() const {
  return data_.size();
}
inline int MapString::data_size() const {
  return _internal_data_size();
}
inline void MapString::clear_data() {
  data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::context_value >&
MapString::_internal_data() const {
  return data_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::context_value >&
MapString::data() const {
  // @@protoc_insertion_point(field_map:MapString.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::context_value >*
MapString::_internal_mutable_data() {
  return data_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::context_value >*
MapString::mutable_data() {
  // @@protoc_insertion_point(field_mutable_map:MapString.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// context_value

// bool bool = 1;
inline bool context_value::_internal_has_bool_() const {
  return value_type_case() == kBool;
}
inline void context_value::set_has_bool_() {
  _oneof_case_[0] = kBool;
}
inline void context_value::clear_bool_() {
  if (_internal_has_bool_()) {
    value_type_.bool__ = false;
    clear_has_value_type();
  }
}
inline bool context_value::_internal_bool_() const {
  if (_internal_has_bool_()) {
    return value_type_.bool__;
  }
  return false;
}
inline void context_value::_internal_set_bool_(bool value) {
  if (!_internal_has_bool_()) {
    clear_value_type();
    set_has_bool_();
  }
  value_type_.bool__ = value;
}
inline bool context_value::bool_() const {
  // @@protoc_insertion_point(field_get:context_value.bool)
  return _internal_bool_();
}
inline void context_value::set_bool_(bool value) {
  _internal_set_bool_(value);
  // @@protoc_insertion_point(field_set:context_value.bool)
}

// float float = 2;
inline bool context_value::_internal_has_float_() const {
  return value_type_case() == kFloat;
}
inline void context_value::set_has_float_() {
  _oneof_case_[0] = kFloat;
}
inline void context_value::clear_float_() {
  if (_internal_has_float_()) {
    value_type_.float__ = 0;
    clear_has_value_type();
  }
}
inline float context_value::_internal_float_() const {
  if (_internal_has_float_()) {
    return value_type_.float__;
  }
  return 0;
}
inline void context_value::_internal_set_float_(float value) {
  if (!_internal_has_float_()) {
    clear_value_type();
    set_has_float_();
  }
  value_type_.float__ = value;
}
inline float context_value::float_() const {
  // @@protoc_insertion_point(field_get:context_value.float)
  return _internal_float_();
}
inline void context_value::set_float_(float value) {
  _internal_set_float_(value);
  // @@protoc_insertion_point(field_set:context_value.float)
}

// double double = 3;
inline bool context_value::_internal_has_double_() const {
  return value_type_case() == kDouble;
}
inline void context_value::set_has_double_() {
  _oneof_case_[0] = kDouble;
}
inline void context_value::clear_double_() {
  if (_internal_has_double_()) {
    value_type_.double__ = 0;
    clear_has_value_type();
  }
}
inline double context_value::_internal_double_() const {
  if (_internal_has_double_()) {
    return value_type_.double__;
  }
  return 0;
}
inline void context_value::_internal_set_double_(double value) {
  if (!_internal_has_double_()) {
    clear_value_type();
    set_has_double_();
  }
  value_type_.double__ = value;
}
inline double context_value::double_() const {
  // @@protoc_insertion_point(field_get:context_value.double)
  return _internal_double_();
}
inline void context_value::set_double_(double value) {
  _internal_set_double_(value);
  // @@protoc_insertion_point(field_set:context_value.double)
}

// uint32 uint32 = 4;
inline bool context_value::_internal_has_uint32() const {
  return value_type_case() == kUint32;
}
inline void context_value::set_has_uint32() {
  _oneof_case_[0] = kUint32;
}
inline void context_value::clear_uint32() {
  if (_internal_has_uint32()) {
    value_type_.uint32_ = 0u;
    clear_has_value_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 context_value::_internal_uint32() const {
  if (_internal_has_uint32()) {
    return value_type_.uint32_;
  }
  return 0u;
}
inline void context_value::_internal_set_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_uint32()) {
    clear_value_type();
    set_has_uint32();
  }
  value_type_.uint32_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 context_value::uint32() const {
  // @@protoc_insertion_point(field_get:context_value.uint32)
  return _internal_uint32();
}
inline void context_value::set_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uint32(value);
  // @@protoc_insertion_point(field_set:context_value.uint32)
}

// uint64 uint64 = 5;
inline bool context_value::_internal_has_uint64() const {
  return value_type_case() == kUint64;
}
inline void context_value::set_has_uint64() {
  _oneof_case_[0] = kUint64;
}
inline void context_value::clear_uint64() {
  if (_internal_has_uint64()) {
    value_type_.uint64_ = PROTOBUF_ULONGLONG(0);
    clear_has_value_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 context_value::_internal_uint64() const {
  if (_internal_has_uint64()) {
    return value_type_.uint64_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void context_value::_internal_set_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_uint64()) {
    clear_value_type();
    set_has_uint64();
  }
  value_type_.uint64_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 context_value::uint64() const {
  // @@protoc_insertion_point(field_get:context_value.uint64)
  return _internal_uint64();
}
inline void context_value::set_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uint64(value);
  // @@protoc_insertion_point(field_set:context_value.uint64)
}

// int32 int32 = 6;
inline bool context_value::_internal_has_int32() const {
  return value_type_case() == kInt32;
}
inline void context_value::set_has_int32() {
  _oneof_case_[0] = kInt32;
}
inline void context_value::clear_int32() {
  if (_internal_has_int32()) {
    value_type_.int32_ = 0;
    clear_has_value_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 context_value::_internal_int32() const {
  if (_internal_has_int32()) {
    return value_type_.int32_;
  }
  return 0;
}
inline void context_value::_internal_set_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_int32()) {
    clear_value_type();
    set_has_int32();
  }
  value_type_.int32_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 context_value::int32() const {
  // @@protoc_insertion_point(field_get:context_value.int32)
  return _internal_int32();
}
inline void context_value::set_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int32(value);
  // @@protoc_insertion_point(field_set:context_value.int32)
}

// int64 int64 = 7;
inline bool context_value::_internal_has_int64() const {
  return value_type_case() == kInt64;
}
inline void context_value::set_has_int64() {
  _oneof_case_[0] = kInt64;
}
inline void context_value::clear_int64() {
  if (_internal_has_int64()) {
    value_type_.int64_ = PROTOBUF_LONGLONG(0);
    clear_has_value_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 context_value::_internal_int64() const {
  if (_internal_has_int64()) {
    return value_type_.int64_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void context_value::_internal_set_int64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_int64()) {
    clear_value_type();
    set_has_int64();
  }
  value_type_.int64_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 context_value::int64() const {
  // @@protoc_insertion_point(field_get:context_value.int64)
  return _internal_int64();
}
inline void context_value::set_int64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_int64(value);
  // @@protoc_insertion_point(field_set:context_value.int64)
}

// sint32 sint32 = 8;
inline bool context_value::_internal_has_sint32() const {
  return value_type_case() == kSint32;
}
inline void context_value::set_has_sint32() {
  _oneof_case_[0] = kSint32;
}
inline void context_value::clear_sint32() {
  if (_internal_has_sint32()) {
    value_type_.sint32_ = 0;
    clear_has_value_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 context_value::_internal_sint32() const {
  if (_internal_has_sint32()) {
    return value_type_.sint32_;
  }
  return 0;
}
inline void context_value::_internal_set_sint32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_sint32()) {
    clear_value_type();
    set_has_sint32();
  }
  value_type_.sint32_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 context_value::sint32() const {
  // @@protoc_insertion_point(field_get:context_value.sint32)
  return _internal_sint32();
}
inline void context_value::set_sint32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sint32(value);
  // @@protoc_insertion_point(field_set:context_value.sint32)
}

// sint64 sint64 = 9;
inline bool context_value::_internal_has_sint64() const {
  return value_type_case() == kSint64;
}
inline void context_value::set_has_sint64() {
  _oneof_case_[0] = kSint64;
}
inline void context_value::clear_sint64() {
  if (_internal_has_sint64()) {
    value_type_.sint64_ = PROTOBUF_LONGLONG(0);
    clear_has_value_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 context_value::_internal_sint64() const {
  if (_internal_has_sint64()) {
    return value_type_.sint64_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void context_value::_internal_set_sint64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_sint64()) {
    clear_value_type();
    set_has_sint64();
  }
  value_type_.sint64_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 context_value::sint64() const {
  // @@protoc_insertion_point(field_get:context_value.sint64)
  return _internal_sint64();
}
inline void context_value::set_sint64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sint64(value);
  // @@protoc_insertion_point(field_set:context_value.sint64)
}

// fixed32 fixed32 = 10;
inline bool context_value::_internal_has_fixed32() const {
  return value_type_case() == kFixed32;
}
inline void context_value::set_has_fixed32() {
  _oneof_case_[0] = kFixed32;
}
inline void context_value::clear_fixed32() {
  if (_internal_has_fixed32()) {
    value_type_.fixed32_ = 0u;
    clear_has_value_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 context_value::_internal_fixed32() const {
  if (_internal_has_fixed32()) {
    return value_type_.fixed32_;
  }
  return 0u;
}
inline void context_value::_internal_set_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_fixed32()) {
    clear_value_type();
    set_has_fixed32();
  }
  value_type_.fixed32_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 context_value::fixed32() const {
  // @@protoc_insertion_point(field_get:context_value.fixed32)
  return _internal_fixed32();
}
inline void context_value::set_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fixed32(value);
  // @@protoc_insertion_point(field_set:context_value.fixed32)
}

// fixed64 fixed64 = 11;
inline bool context_value::_internal_has_fixed64() const {
  return value_type_case() == kFixed64;
}
inline void context_value::set_has_fixed64() {
  _oneof_case_[0] = kFixed64;
}
inline void context_value::clear_fixed64() {
  if (_internal_has_fixed64()) {
    value_type_.fixed64_ = PROTOBUF_ULONGLONG(0);
    clear_has_value_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 context_value::_internal_fixed64() const {
  if (_internal_has_fixed64()) {
    return value_type_.fixed64_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void context_value::_internal_set_fixed64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_fixed64()) {
    clear_value_type();
    set_has_fixed64();
  }
  value_type_.fixed64_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 context_value::fixed64() const {
  // @@protoc_insertion_point(field_get:context_value.fixed64)
  return _internal_fixed64();
}
inline void context_value::set_fixed64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fixed64(value);
  // @@protoc_insertion_point(field_set:context_value.fixed64)
}

// sfixed32 sfixed32 = 12;
inline bool context_value::_internal_has_sfixed32() const {
  return value_type_case() == kSfixed32;
}
inline void context_value::set_has_sfixed32() {
  _oneof_case_[0] = kSfixed32;
}
inline void context_value::clear_sfixed32() {
  if (_internal_has_sfixed32()) {
    value_type_.sfixed32_ = 0;
    clear_has_value_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 context_value::_internal_sfixed32() const {
  if (_internal_has_sfixed32()) {
    return value_type_.sfixed32_;
  }
  return 0;
}
inline void context_value::_internal_set_sfixed32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_sfixed32()) {
    clear_value_type();
    set_has_sfixed32();
  }
  value_type_.sfixed32_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 context_value::sfixed32() const {
  // @@protoc_insertion_point(field_get:context_value.sfixed32)
  return _internal_sfixed32();
}
inline void context_value::set_sfixed32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sfixed32(value);
  // @@protoc_insertion_point(field_set:context_value.sfixed32)
}

// sfixed64 sfixed64 = 13;
inline bool context_value::_internal_has_sfixed64() const {
  return value_type_case() == kSfixed64;
}
inline void context_value::set_has_sfixed64() {
  _oneof_case_[0] = kSfixed64;
}
inline void context_value::clear_sfixed64() {
  if (_internal_has_sfixed64()) {
    value_type_.sfixed64_ = PROTOBUF_LONGLONG(0);
    clear_has_value_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 context_value::_internal_sfixed64() const {
  if (_internal_has_sfixed64()) {
    return value_type_.sfixed64_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void context_value::_internal_set_sfixed64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_sfixed64()) {
    clear_value_type();
    set_has_sfixed64();
  }
  value_type_.sfixed64_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 context_value::sfixed64() const {
  // @@protoc_insertion_point(field_get:context_value.sfixed64)
  return _internal_sfixed64();
}
inline void context_value::set_sfixed64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sfixed64(value);
  // @@protoc_insertion_point(field_set:context_value.sfixed64)
}

// string string = 14;
inline bool context_value::_internal_has_string() const {
  return value_type_case() == kString;
}
inline void context_value::set_has_string() {
  _oneof_case_[0] = kString;
}
inline void context_value::clear_string() {
  if (_internal_has_string()) {
    value_type_.string_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_value_type();
  }
}
inline const std::string& context_value::string() const {
  // @@protoc_insertion_point(field_get:context_value.string)
  return _internal_string();
}
inline void context_value::set_string(const std::string& value) {
  _internal_set_string(value);
  // @@protoc_insertion_point(field_set:context_value.string)
}
inline std::string* context_value::mutable_string() {
  // @@protoc_insertion_point(field_mutable:context_value.string)
  return _internal_mutable_string();
}
inline const std::string& context_value::_internal_string() const {
  if (_internal_has_string()) {
    return value_type_.string_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void context_value::_internal_set_string(const std::string& value) {
  if (!_internal_has_string()) {
    clear_value_type();
    set_has_string();
    value_type_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_type_.string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void context_value::set_string(std::string&& value) {
  // @@protoc_insertion_point(field_set:context_value.string)
  if (!_internal_has_string()) {
    clear_value_type();
    set_has_string();
    value_type_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_type_.string_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:context_value.string)
}
inline void context_value::set_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_string()) {
    clear_value_type();
    set_has_string();
    value_type_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_type_.string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:context_value.string)
}
inline void context_value::set_string(const char* value,
                             size_t size) {
  if (!_internal_has_string()) {
    clear_value_type();
    set_has_string();
    value_type_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_type_.string_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:context_value.string)
}
inline std::string* context_value::_internal_mutable_string() {
  if (!_internal_has_string()) {
    clear_value_type();
    set_has_string();
    value_type_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_type_.string_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* context_value::release_string() {
  // @@protoc_insertion_point(field_release:context_value.string)
  if (_internal_has_string()) {
    clear_has_value_type();
    return value_type_.string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void context_value::set_allocated_string(std::string* string) {
  if (has_value_type()) {
    clear_value_type();
  }
  if (string != nullptr) {
    set_has_string();
    value_type_.string_.UnsafeSetDefault(string);
  }
  // @@protoc_insertion_point(field_set_allocated:context_value.string)
}
inline std::string* context_value::unsafe_arena_release_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:context_value.string)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_string()) {
    clear_has_value_type();
    return value_type_.string_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void context_value::unsafe_arena_set_allocated_string(std::string* string) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_string()) {
    value_type_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_value_type();
  if (string) {
    set_has_string();
    value_type_.string_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:context_value.string)
}

// bytes bytes = 15;
inline bool context_value::_internal_has_bytes() const {
  return value_type_case() == kBytes;
}
inline void context_value::set_has_bytes() {
  _oneof_case_[0] = kBytes;
}
inline void context_value::clear_bytes() {
  if (_internal_has_bytes()) {
    value_type_.bytes_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_value_type();
  }
}
inline const std::string& context_value::bytes() const {
  // @@protoc_insertion_point(field_get:context_value.bytes)
  return _internal_bytes();
}
inline void context_value::set_bytes(const std::string& value) {
  _internal_set_bytes(value);
  // @@protoc_insertion_point(field_set:context_value.bytes)
}
inline std::string* context_value::mutable_bytes() {
  // @@protoc_insertion_point(field_mutable:context_value.bytes)
  return _internal_mutable_bytes();
}
inline const std::string& context_value::_internal_bytes() const {
  if (_internal_has_bytes()) {
    return value_type_.bytes_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void context_value::_internal_set_bytes(const std::string& value) {
  if (!_internal_has_bytes()) {
    clear_value_type();
    set_has_bytes();
    value_type_.bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_type_.bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void context_value::set_bytes(std::string&& value) {
  // @@protoc_insertion_point(field_set:context_value.bytes)
  if (!_internal_has_bytes()) {
    clear_value_type();
    set_has_bytes();
    value_type_.bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_type_.bytes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:context_value.bytes)
}
inline void context_value::set_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_bytes()) {
    clear_value_type();
    set_has_bytes();
    value_type_.bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_type_.bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:context_value.bytes)
}
inline void context_value::set_bytes(const void* value,
                             size_t size) {
  if (!_internal_has_bytes()) {
    clear_value_type();
    set_has_bytes();
    value_type_.bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_type_.bytes_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:context_value.bytes)
}
inline std::string* context_value::_internal_mutable_bytes() {
  if (!_internal_has_bytes()) {
    clear_value_type();
    set_has_bytes();
    value_type_.bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_type_.bytes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* context_value::release_bytes() {
  // @@protoc_insertion_point(field_release:context_value.bytes)
  if (_internal_has_bytes()) {
    clear_has_value_type();
    return value_type_.bytes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void context_value::set_allocated_bytes(std::string* bytes) {
  if (has_value_type()) {
    clear_value_type();
  }
  if (bytes != nullptr) {
    set_has_bytes();
    value_type_.bytes_.UnsafeSetDefault(bytes);
  }
  // @@protoc_insertion_point(field_set_allocated:context_value.bytes)
}
inline std::string* context_value::unsafe_arena_release_bytes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:context_value.bytes)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_bytes()) {
    clear_has_value_type();
    return value_type_.bytes_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void context_value::unsafe_arena_set_allocated_bytes(std::string* bytes) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_bytes()) {
    value_type_.bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_value_type();
  if (bytes) {
    set_has_bytes();
    value_type_.bytes_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bytes, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:context_value.bytes)
}

// .ArrayInt64 array_int64 = 16;
inline bool context_value::_internal_has_array_int64() const {
  return value_type_case() == kArrayInt64;
}
inline bool context_value::has_array_int64() const {
  return _internal_has_array_int64();
}
inline void context_value::set_has_array_int64() {
  _oneof_case_[0] = kArrayInt64;
}
inline void context_value::clear_array_int64() {
  if (_internal_has_array_int64()) {
    if (GetArena() == nullptr) {
      delete value_type_.array_int64_;
    }
    clear_has_value_type();
  }
}
inline ::ArrayInt64* context_value::release_array_int64() {
  // @@protoc_insertion_point(field_release:context_value.array_int64)
  if (_internal_has_array_int64()) {
    clear_has_value_type();
      ::ArrayInt64* temp = value_type_.array_int64_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_type_.array_int64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ArrayInt64& context_value::_internal_array_int64() const {
  return _internal_has_array_int64()
      ? *value_type_.array_int64_
      : *reinterpret_cast< ::ArrayInt64*>(&::_ArrayInt64_default_instance_);
}
inline const ::ArrayInt64& context_value::array_int64() const {
  // @@protoc_insertion_point(field_get:context_value.array_int64)
  return _internal_array_int64();
}
inline ::ArrayInt64* context_value::unsafe_arena_release_array_int64() {
  // @@protoc_insertion_point(field_unsafe_arena_release:context_value.array_int64)
  if (_internal_has_array_int64()) {
    clear_has_value_type();
    ::ArrayInt64* temp = value_type_.array_int64_;
    value_type_.array_int64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void context_value::unsafe_arena_set_allocated_array_int64(::ArrayInt64* array_int64) {
  clear_value_type();
  if (array_int64) {
    set_has_array_int64();
    value_type_.array_int64_ = array_int64;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:context_value.array_int64)
}
inline ::ArrayInt64* context_value::_internal_mutable_array_int64() {
  if (!_internal_has_array_int64()) {
    clear_value_type();
    set_has_array_int64();
    value_type_.array_int64_ = CreateMaybeMessage< ::ArrayInt64 >(GetArena());
  }
  return value_type_.array_int64_;
}
inline ::ArrayInt64* context_value::mutable_array_int64() {
  // @@protoc_insertion_point(field_mutable:context_value.array_int64)
  return _internal_mutable_array_int64();
}

// .ArrayUint64 array_uint64 = 17;
inline bool context_value::_internal_has_array_uint64() const {
  return value_type_case() == kArrayUint64;
}
inline bool context_value::has_array_uint64() const {
  return _internal_has_array_uint64();
}
inline void context_value::set_has_array_uint64() {
  _oneof_case_[0] = kArrayUint64;
}
inline void context_value::clear_array_uint64() {
  if (_internal_has_array_uint64()) {
    if (GetArena() == nullptr) {
      delete value_type_.array_uint64_;
    }
    clear_has_value_type();
  }
}
inline ::ArrayUint64* context_value::release_array_uint64() {
  // @@protoc_insertion_point(field_release:context_value.array_uint64)
  if (_internal_has_array_uint64()) {
    clear_has_value_type();
      ::ArrayUint64* temp = value_type_.array_uint64_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_type_.array_uint64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ArrayUint64& context_value::_internal_array_uint64() const {
  return _internal_has_array_uint64()
      ? *value_type_.array_uint64_
      : *reinterpret_cast< ::ArrayUint64*>(&::_ArrayUint64_default_instance_);
}
inline const ::ArrayUint64& context_value::array_uint64() const {
  // @@protoc_insertion_point(field_get:context_value.array_uint64)
  return _internal_array_uint64();
}
inline ::ArrayUint64* context_value::unsafe_arena_release_array_uint64() {
  // @@protoc_insertion_point(field_unsafe_arena_release:context_value.array_uint64)
  if (_internal_has_array_uint64()) {
    clear_has_value_type();
    ::ArrayUint64* temp = value_type_.array_uint64_;
    value_type_.array_uint64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void context_value::unsafe_arena_set_allocated_array_uint64(::ArrayUint64* array_uint64) {
  clear_value_type();
  if (array_uint64) {
    set_has_array_uint64();
    value_type_.array_uint64_ = array_uint64;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:context_value.array_uint64)
}
inline ::ArrayUint64* context_value::_internal_mutable_array_uint64() {
  if (!_internal_has_array_uint64()) {
    clear_value_type();
    set_has_array_uint64();
    value_type_.array_uint64_ = CreateMaybeMessage< ::ArrayUint64 >(GetArena());
  }
  return value_type_.array_uint64_;
}
inline ::ArrayUint64* context_value::mutable_array_uint64() {
  // @@protoc_insertion_point(field_mutable:context_value.array_uint64)
  return _internal_mutable_array_uint64();
}

// .ArrayDouble array_double = 18;
inline bool context_value::_internal_has_array_double() const {
  return value_type_case() == kArrayDouble;
}
inline bool context_value::has_array_double() const {
  return _internal_has_array_double();
}
inline void context_value::set_has_array_double() {
  _oneof_case_[0] = kArrayDouble;
}
inline void context_value::clear_array_double() {
  if (_internal_has_array_double()) {
    if (GetArena() == nullptr) {
      delete value_type_.array_double_;
    }
    clear_has_value_type();
  }
}
inline ::ArrayDouble* context_value::release_array_double() {
  // @@protoc_insertion_point(field_release:context_value.array_double)
  if (_internal_has_array_double()) {
    clear_has_value_type();
      ::ArrayDouble* temp = value_type_.array_double_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_type_.array_double_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ArrayDouble& context_value::_internal_array_double() const {
  return _internal_has_array_double()
      ? *value_type_.array_double_
      : *reinterpret_cast< ::ArrayDouble*>(&::_ArrayDouble_default_instance_);
}
inline const ::ArrayDouble& context_value::array_double() const {
  // @@protoc_insertion_point(field_get:context_value.array_double)
  return _internal_array_double();
}
inline ::ArrayDouble* context_value::unsafe_arena_release_array_double() {
  // @@protoc_insertion_point(field_unsafe_arena_release:context_value.array_double)
  if (_internal_has_array_double()) {
    clear_has_value_type();
    ::ArrayDouble* temp = value_type_.array_double_;
    value_type_.array_double_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void context_value::unsafe_arena_set_allocated_array_double(::ArrayDouble* array_double) {
  clear_value_type();
  if (array_double) {
    set_has_array_double();
    value_type_.array_double_ = array_double;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:context_value.array_double)
}
inline ::ArrayDouble* context_value::_internal_mutable_array_double() {
  if (!_internal_has_array_double()) {
    clear_value_type();
    set_has_array_double();
    value_type_.array_double_ = CreateMaybeMessage< ::ArrayDouble >(GetArena());
  }
  return value_type_.array_double_;
}
inline ::ArrayDouble* context_value::mutable_array_double() {
  // @@protoc_insertion_point(field_mutable:context_value.array_double)
  return _internal_mutable_array_double();
}

// .ArrayString array_string = 19;
inline bool context_value::_internal_has_array_string() const {
  return value_type_case() == kArrayString;
}
inline bool context_value::has_array_string() const {
  return _internal_has_array_string();
}
inline void context_value::set_has_array_string() {
  _oneof_case_[0] = kArrayString;
}
inline void context_value::clear_array_string() {
  if (_internal_has_array_string()) {
    if (GetArena() == nullptr) {
      delete value_type_.array_string_;
    }
    clear_has_value_type();
  }
}
inline ::ArrayString* context_value::release_array_string() {
  // @@protoc_insertion_point(field_release:context_value.array_string)
  if (_internal_has_array_string()) {
    clear_has_value_type();
      ::ArrayString* temp = value_type_.array_string_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_type_.array_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ArrayString& context_value::_internal_array_string() const {
  return _internal_has_array_string()
      ? *value_type_.array_string_
      : *reinterpret_cast< ::ArrayString*>(&::_ArrayString_default_instance_);
}
inline const ::ArrayString& context_value::array_string() const {
  // @@protoc_insertion_point(field_get:context_value.array_string)
  return _internal_array_string();
}
inline ::ArrayString* context_value::unsafe_arena_release_array_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:context_value.array_string)
  if (_internal_has_array_string()) {
    clear_has_value_type();
    ::ArrayString* temp = value_type_.array_string_;
    value_type_.array_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void context_value::unsafe_arena_set_allocated_array_string(::ArrayString* array_string) {
  clear_value_type();
  if (array_string) {
    set_has_array_string();
    value_type_.array_string_ = array_string;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:context_value.array_string)
}
inline ::ArrayString* context_value::_internal_mutable_array_string() {
  if (!_internal_has_array_string()) {
    clear_value_type();
    set_has_array_string();
    value_type_.array_string_ = CreateMaybeMessage< ::ArrayString >(GetArena());
  }
  return value_type_.array_string_;
}
inline ::ArrayString* context_value::mutable_array_string() {
  // @@protoc_insertion_point(field_mutable:context_value.array_string)
  return _internal_mutable_array_string();
}

// .ArrayValue array_value = 20;
inline bool context_value::_internal_has_array_value() const {
  return value_type_case() == kArrayValue;
}
inline bool context_value::has_array_value() const {
  return _internal_has_array_value();
}
inline void context_value::set_has_array_value() {
  _oneof_case_[0] = kArrayValue;
}
inline void context_value::clear_array_value() {
  if (_internal_has_array_value()) {
    if (GetArena() == nullptr) {
      delete value_type_.array_value_;
    }
    clear_has_value_type();
  }
}
inline ::ArrayValue* context_value::release_array_value() {
  // @@protoc_insertion_point(field_release:context_value.array_value)
  if (_internal_has_array_value()) {
    clear_has_value_type();
      ::ArrayValue* temp = value_type_.array_value_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_type_.array_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ArrayValue& context_value::_internal_array_value() const {
  return _internal_has_array_value()
      ? *value_type_.array_value_
      : *reinterpret_cast< ::ArrayValue*>(&::_ArrayValue_default_instance_);
}
inline const ::ArrayValue& context_value::array_value() const {
  // @@protoc_insertion_point(field_get:context_value.array_value)
  return _internal_array_value();
}
inline ::ArrayValue* context_value::unsafe_arena_release_array_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:context_value.array_value)
  if (_internal_has_array_value()) {
    clear_has_value_type();
    ::ArrayValue* temp = value_type_.array_value_;
    value_type_.array_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void context_value::unsafe_arena_set_allocated_array_value(::ArrayValue* array_value) {
  clear_value_type();
  if (array_value) {
    set_has_array_value();
    value_type_.array_value_ = array_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:context_value.array_value)
}
inline ::ArrayValue* context_value::_internal_mutable_array_value() {
  if (!_internal_has_array_value()) {
    clear_value_type();
    set_has_array_value();
    value_type_.array_value_ = CreateMaybeMessage< ::ArrayValue >(GetArena());
  }
  return value_type_.array_value_;
}
inline ::ArrayValue* context_value::mutable_array_value() {
  // @@protoc_insertion_point(field_mutable:context_value.array_value)
  return _internal_mutable_array_value();
}

// .MapString map_string = 21;
inline bool context_value::_internal_has_map_string() const {
  return value_type_case() == kMapString;
}
inline bool context_value::has_map_string() const {
  return _internal_has_map_string();
}
inline void context_value::set_has_map_string() {
  _oneof_case_[0] = kMapString;
}
inline void context_value::clear_map_string() {
  if (_internal_has_map_string()) {
    if (GetArena() == nullptr) {
      delete value_type_.map_string_;
    }
    clear_has_value_type();
  }
}
inline ::MapString* context_value::release_map_string() {
  // @@protoc_insertion_point(field_release:context_value.map_string)
  if (_internal_has_map_string()) {
    clear_has_value_type();
      ::MapString* temp = value_type_.map_string_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_type_.map_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::MapString& context_value::_internal_map_string() const {
  return _internal_has_map_string()
      ? *value_type_.map_string_
      : *reinterpret_cast< ::MapString*>(&::_MapString_default_instance_);
}
inline const ::MapString& context_value::map_string() const {
  // @@protoc_insertion_point(field_get:context_value.map_string)
  return _internal_map_string();
}
inline ::MapString* context_value::unsafe_arena_release_map_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:context_value.map_string)
  if (_internal_has_map_string()) {
    clear_has_value_type();
    ::MapString* temp = value_type_.map_string_;
    value_type_.map_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void context_value::unsafe_arena_set_allocated_map_string(::MapString* map_string) {
  clear_value_type();
  if (map_string) {
    set_has_map_string();
    value_type_.map_string_ = map_string;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:context_value.map_string)
}
inline ::MapString* context_value::_internal_mutable_map_string() {
  if (!_internal_has_map_string()) {
    clear_value_type();
    set_has_map_string();
    value_type_.map_string_ = CreateMaybeMessage< ::MapString >(GetArena());
  }
  return value_type_.map_string_;
}
inline ::MapString* context_value::mutable_map_string() {
  // @@protoc_insertion_point(field_mutable:context_value.map_string)
  return _internal_mutable_map_string();
}

inline bool context_value::has_value_type() const {
  return value_type_case() != VALUE_TYPE_NOT_SET;
}
inline void context_value::clear_has_value_type() {
  _oneof_case_[0] = VALUE_TYPE_NOT_SET;
}
inline context_value::ValueTypeCase context_value::value_type_case() const {
  return context_value::ValueTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MatchRuleReq

// map<string, .context_value> context_map = 1;
inline int MatchRuleReq::_internal_context_map_size() const {
  return context_map_.size();
}
inline int MatchRuleReq::context_map_size() const {
  return _internal_context_map_size();
}
inline void MatchRuleReq::clear_context_map() {
  context_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::context_value >&
MatchRuleReq::_internal_context_map() const {
  return context_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::context_value >&
MatchRuleReq::context_map() const {
  // @@protoc_insertion_point(field_map:MatchRuleReq.context_map)
  return _internal_context_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::context_value >*
MatchRuleReq::_internal_mutable_context_map() {
  return context_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::context_value >*
MatchRuleReq::mutable_context_map() {
  // @@protoc_insertion_point(field_mutable_map:MatchRuleReq.context_map)
  return _internal_mutable_context_map();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_data_2eproto
