// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#include "data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_data_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ArrayDouble_data_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ArrayInt64_data_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ArrayString_data_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ArrayUint64_data_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ArrayValue_data_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MatchRuleReq_ContextMapEntry_DoNotUse_data_2eproto;
class ArrayInt64DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArrayInt64> _instance;
} _ArrayInt64_default_instance_;
class ArrayUint64DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArrayUint64> _instance;
} _ArrayUint64_default_instance_;
class ArrayDoubleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArrayDouble> _instance;
} _ArrayDouble_default_instance_;
class ArrayStringDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArrayString> _instance;
} _ArrayString_default_instance_;
class ArrayValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArrayValue> _instance;
} _ArrayValue_default_instance_;
class MapString_DataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapString_DataEntry_DoNotUse> _instance;
} _MapString_DataEntry_DoNotUse_default_instance_;
class MapStringDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapString> _instance;
} _MapString_default_instance_;
class context_valueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<context_value> _instance;
  bool bool__;
  float float__;
  double double__;
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uint64_;
  ::PROTOBUF_NAMESPACE_ID::int32 int32_;
  ::PROTOBUF_NAMESPACE_ID::int64 int64_;
  ::PROTOBUF_NAMESPACE_ID::int32 sint32_;
  ::PROTOBUF_NAMESPACE_ID::int64 sint64_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fixed32_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fixed64_;
  ::PROTOBUF_NAMESPACE_ID::int32 sfixed32_;
  ::PROTOBUF_NAMESPACE_ID::int64 sfixed64_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_;
  const ::ArrayInt64* array_int64_;
  const ::ArrayUint64* array_uint64_;
  const ::ArrayDouble* array_double_;
  const ::ArrayString* array_string_;
  const ::ArrayValue* array_value_;
  const ::MapString* map_string_;
} _context_value_default_instance_;
class MatchRuleReq_ContextMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchRuleReq_ContextMapEntry_DoNotUse> _instance;
} _MatchRuleReq_ContextMapEntry_DoNotUse_default_instance_;
class MatchRuleReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchRuleReq> _instance;
} _MatchRuleReq_default_instance_;
static void InitDefaultsscc_info_ArrayDouble_data_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ArrayDouble_default_instance_;
    new (ptr) ::ArrayDouble();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ArrayDouble::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ArrayDouble_data_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ArrayDouble_data_2eproto}, {}};

static void InitDefaultsscc_info_ArrayInt64_data_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ArrayInt64_default_instance_;
    new (ptr) ::ArrayInt64();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ArrayInt64::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ArrayInt64_data_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ArrayInt64_data_2eproto}, {}};

static void InitDefaultsscc_info_ArrayString_data_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ArrayString_default_instance_;
    new (ptr) ::ArrayString();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ArrayString::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ArrayString_data_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ArrayString_data_2eproto}, {}};

static void InitDefaultsscc_info_ArrayUint64_data_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ArrayUint64_default_instance_;
    new (ptr) ::ArrayUint64();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ArrayUint64::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ArrayUint64_data_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ArrayUint64_data_2eproto}, {}};

static void InitDefaultsscc_info_ArrayValue_data_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ArrayValue_default_instance_;
    new (ptr) ::ArrayValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::_MapString_DataEntry_DoNotUse_default_instance_;
    new (ptr) ::MapString_DataEntry_DoNotUse();
  }
  {
    void* ptr = &::_MapString_default_instance_;
    new (ptr) ::MapString();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::_context_value_default_instance_;
    new (ptr) ::context_value();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ArrayValue::InitAsDefaultInstance();
  ::MapString_DataEntry_DoNotUse::InitAsDefaultInstance();
  ::MapString::InitAsDefaultInstance();
  ::context_value::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ArrayValue_data_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ArrayValue_data_2eproto}, {
      &scc_info_ArrayInt64_data_2eproto.base,
      &scc_info_ArrayUint64_data_2eproto.base,
      &scc_info_ArrayDouble_data_2eproto.base,
      &scc_info_ArrayString_data_2eproto.base,}};

static void InitDefaultsscc_info_MatchRuleReq_data_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MatchRuleReq_default_instance_;
    new (ptr) ::MatchRuleReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MatchRuleReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MatchRuleReq_data_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MatchRuleReq_data_2eproto}, {
      &scc_info_MatchRuleReq_ContextMapEntry_DoNotUse_data_2eproto.base,}};

static void InitDefaultsscc_info_MatchRuleReq_ContextMapEntry_DoNotUse_data_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MatchRuleReq_ContextMapEntry_DoNotUse_default_instance_;
    new (ptr) ::MatchRuleReq_ContextMapEntry_DoNotUse();
  }
  ::MatchRuleReq_ContextMapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MatchRuleReq_ContextMapEntry_DoNotUse_data_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MatchRuleReq_ContextMapEntry_DoNotUse_data_2eproto}, {
      &scc_info_ArrayValue_data_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_data_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_data_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_data_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_data_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ArrayInt64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ArrayInt64, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ArrayUint64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ArrayUint64, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ArrayDouble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ArrayDouble, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ArrayString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ArrayString, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ArrayValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ArrayValue, data_),
  PROTOBUF_FIELD_OFFSET(::MapString_DataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MapString_DataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MapString_DataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::MapString_DataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MapString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MapString, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::context_value, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::context_value, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::context_valueDefaultTypeInternal, bool__),
  offsetof(::context_valueDefaultTypeInternal, float__),
  offsetof(::context_valueDefaultTypeInternal, double__),
  offsetof(::context_valueDefaultTypeInternal, uint32_),
  offsetof(::context_valueDefaultTypeInternal, uint64_),
  offsetof(::context_valueDefaultTypeInternal, int32_),
  offsetof(::context_valueDefaultTypeInternal, int64_),
  offsetof(::context_valueDefaultTypeInternal, sint32_),
  offsetof(::context_valueDefaultTypeInternal, sint64_),
  offsetof(::context_valueDefaultTypeInternal, fixed32_),
  offsetof(::context_valueDefaultTypeInternal, fixed64_),
  offsetof(::context_valueDefaultTypeInternal, sfixed32_),
  offsetof(::context_valueDefaultTypeInternal, sfixed64_),
  offsetof(::context_valueDefaultTypeInternal, string_),
  offsetof(::context_valueDefaultTypeInternal, bytes_),
  offsetof(::context_valueDefaultTypeInternal, array_int64_),
  offsetof(::context_valueDefaultTypeInternal, array_uint64_),
  offsetof(::context_valueDefaultTypeInternal, array_double_),
  offsetof(::context_valueDefaultTypeInternal, array_string_),
  offsetof(::context_valueDefaultTypeInternal, array_value_),
  offsetof(::context_valueDefaultTypeInternal, map_string_),
  PROTOBUF_FIELD_OFFSET(::context_value, value_type_),
  PROTOBUF_FIELD_OFFSET(::MatchRuleReq_ContextMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MatchRuleReq_ContextMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MatchRuleReq_ContextMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::MatchRuleReq_ContextMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MatchRuleReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MatchRuleReq, context_map_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ArrayInt64)},
  { 6, -1, sizeof(::ArrayUint64)},
  { 12, -1, sizeof(::ArrayDouble)},
  { 18, -1, sizeof(::ArrayString)},
  { 24, -1, sizeof(::ArrayValue)},
  { 30, 37, sizeof(::MapString_DataEntry_DoNotUse)},
  { 39, -1, sizeof(::MapString)},
  { 45, -1, sizeof(::context_value)},
  { 72, 79, sizeof(::MatchRuleReq_ContextMapEntry_DoNotUse)},
  { 81, -1, sizeof(::MatchRuleReq)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ArrayInt64_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ArrayUint64_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ArrayDouble_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ArrayString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ArrayValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MapString_DataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MapString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_context_value_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MatchRuleReq_ContextMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MatchRuleReq_default_instance_),
};

const char descriptor_table_protodef_data_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ndata.proto\"\032\n\nArrayInt64\022\014\n\004data\030\001 \003(\003"
  "\"\033\n\013ArrayUint64\022\014\n\004data\030\001 \003(\004\"\033\n\013ArrayDo"
  "uble\022\014\n\004data\030\001 \003(\001\"\033\n\013ArrayString\022\014\n\004dat"
  "a\030\001 \003(\t\"*\n\nArrayValue\022\034\n\004data\030\001 \003(\0132\016.co"
  "ntext_value\"l\n\tMapString\022\"\n\004data\030\001 \003(\0132\024"
  ".MapString.DataEntry\032;\n\tDataEntry\022\013\n\003key"
  "\030\001 \001(\t\022\035\n\005value\030\002 \001(\0132\016.context_value:\0028"
  "\001\"\207\004\n\rcontext_value\022\016\n\004bool\030\001 \001(\010H\000\022\017\n\005f"
  "loat\030\002 \001(\002H\000\022\020\n\006double\030\003 \001(\001H\000\022\020\n\006uint32"
  "\030\004 \001(\rH\000\022\020\n\006uint64\030\005 \001(\004H\000\022\017\n\005int32\030\006 \001("
  "\005H\000\022\017\n\005int64\030\007 \001(\003H\000\022\020\n\006sint32\030\010 \001(\021H\000\022\020"
  "\n\006sint64\030\t \001(\022H\000\022\021\n\007fixed32\030\n \001(\007H\000\022\021\n\007f"
  "ixed64\030\013 \001(\006H\000\022\022\n\010sfixed32\030\014 \001(\017H\000\022\022\n\010sf"
  "ixed64\030\r \001(\020H\000\022\020\n\006string\030\016 \001(\tH\000\022\017\n\005byte"
  "s\030\017 \001(\014H\000\022\"\n\013array_int64\030\020 \001(\0132\013.ArrayIn"
  "t64H\000\022$\n\014array_uint64\030\021 \001(\0132\014.ArrayUint6"
  "4H\000\022$\n\014array_double\030\022 \001(\0132\014.ArrayDoubleH"
  "\000\022$\n\014array_string\030\023 \001(\0132\014.ArrayStringH\000\022"
  "\"\n\013array_value\030\024 \001(\0132\013.ArrayValueH\000\022 \n\nm"
  "ap_string\030\025 \001(\0132\n.MapStringH\000B\014\n\nvalue_t"
  "ype\"\205\001\n\014MatchRuleReq\0222\n\013context_map\030\001 \003("
  "\0132\035.MatchRuleReq.ContextMapEntry\032A\n\017Cont"
  "extMapEntry\022\013\n\003key\030\001 \001(\t\022\035\n\005value\030\002 \001(\0132"
  "\016.context_value:\0028\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_data_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_data_2eproto_sccs[7] = {
  &scc_info_ArrayDouble_data_2eproto.base,
  &scc_info_ArrayInt64_data_2eproto.base,
  &scc_info_ArrayString_data_2eproto.base,
  &scc_info_ArrayUint64_data_2eproto.base,
  &scc_info_ArrayValue_data_2eproto.base,
  &scc_info_MatchRuleReq_data_2eproto.base,
  &scc_info_MatchRuleReq_ContextMapEntry_DoNotUse_data_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_data_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_data_2eproto = {
  false, false, descriptor_table_protodef_data_2eproto, "data.proto", 947,
  &descriptor_table_data_2eproto_once, descriptor_table_data_2eproto_sccs, descriptor_table_data_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_data_2eproto::offsets,
  file_level_metadata_data_2eproto, 10, file_level_enum_descriptors_data_2eproto, file_level_service_descriptors_data_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_data_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_data_2eproto)), true);

// ===================================================================

void ArrayInt64::InitAsDefaultInstance() {
}
class ArrayInt64::_Internal {
 public:
};

ArrayInt64::ArrayInt64(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ArrayInt64)
}
ArrayInt64::ArrayInt64(const ArrayInt64& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ArrayInt64)
}

void ArrayInt64::SharedCtor() {
}

ArrayInt64::~ArrayInt64() {
  // @@protoc_insertion_point(destructor:ArrayInt64)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ArrayInt64::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ArrayInt64::ArenaDtor(void* object) {
  ArrayInt64* _this = reinterpret_cast< ArrayInt64* >(object);
  (void)_this;
}
void ArrayInt64::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArrayInt64::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArrayInt64& ArrayInt64::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArrayInt64_data_2eproto.base);
  return *internal_default_instance();
}


void ArrayInt64::Clear() {
// @@protoc_insertion_point(message_clear_start:ArrayInt64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArrayInt64::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArrayInt64::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ArrayInt64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 data = 1;
  {
    int byte_size = _data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArrayInt64)
  return target;
}

size_t ArrayInt64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArrayInt64)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 data = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->data_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArrayInt64::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ArrayInt64)
  GOOGLE_DCHECK_NE(&from, this);
  const ArrayInt64* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArrayInt64>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ArrayInt64)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ArrayInt64)
    MergeFrom(*source);
  }
}

void ArrayInt64::MergeFrom(const ArrayInt64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArrayInt64)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void ArrayInt64::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ArrayInt64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayInt64::CopyFrom(const ArrayInt64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArrayInt64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayInt64::IsInitialized() const {
  return true;
}

void ArrayInt64::InternalSwap(ArrayInt64* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArrayInt64::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ArrayUint64::InitAsDefaultInstance() {
}
class ArrayUint64::_Internal {
 public:
};

ArrayUint64::ArrayUint64(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ArrayUint64)
}
ArrayUint64::ArrayUint64(const ArrayUint64& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ArrayUint64)
}

void ArrayUint64::SharedCtor() {
}

ArrayUint64::~ArrayUint64() {
  // @@protoc_insertion_point(destructor:ArrayUint64)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ArrayUint64::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ArrayUint64::ArenaDtor(void* object) {
  ArrayUint64* _this = reinterpret_cast< ArrayUint64* >(object);
  (void)_this;
}
void ArrayUint64::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArrayUint64::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArrayUint64& ArrayUint64::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArrayUint64_data_2eproto.base);
  return *internal_default_instance();
}


void ArrayUint64::Clear() {
// @@protoc_insertion_point(message_clear_start:ArrayUint64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArrayUint64::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArrayUint64::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ArrayUint64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 data = 1;
  {
    int byte_size = _data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArrayUint64)
  return target;
}

size_t ArrayUint64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArrayUint64)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 data = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->data_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArrayUint64::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ArrayUint64)
  GOOGLE_DCHECK_NE(&from, this);
  const ArrayUint64* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArrayUint64>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ArrayUint64)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ArrayUint64)
    MergeFrom(*source);
  }
}

void ArrayUint64::MergeFrom(const ArrayUint64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArrayUint64)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void ArrayUint64::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ArrayUint64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayUint64::CopyFrom(const ArrayUint64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArrayUint64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayUint64::IsInitialized() const {
  return true;
}

void ArrayUint64::InternalSwap(ArrayUint64* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArrayUint64::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ArrayDouble::InitAsDefaultInstance() {
}
class ArrayDouble::_Internal {
 public:
};

ArrayDouble::ArrayDouble(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ArrayDouble)
}
ArrayDouble::ArrayDouble(const ArrayDouble& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ArrayDouble)
}

void ArrayDouble::SharedCtor() {
}

ArrayDouble::~ArrayDouble() {
  // @@protoc_insertion_point(destructor:ArrayDouble)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ArrayDouble::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ArrayDouble::ArenaDtor(void* object) {
  ArrayDouble* _this = reinterpret_cast< ArrayDouble* >(object);
  (void)_this;
}
void ArrayDouble::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArrayDouble::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArrayDouble& ArrayDouble::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArrayDouble_data_2eproto.base);
  return *internal_default_instance();
}


void ArrayDouble::Clear() {
// @@protoc_insertion_point(message_clear_start:ArrayDouble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArrayDouble::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArrayDouble::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ArrayDouble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double data = 1;
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArrayDouble)
  return target;
}

size_t ArrayDouble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArrayDouble)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArrayDouble::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ArrayDouble)
  GOOGLE_DCHECK_NE(&from, this);
  const ArrayDouble* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArrayDouble>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ArrayDouble)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ArrayDouble)
    MergeFrom(*source);
  }
}

void ArrayDouble::MergeFrom(const ArrayDouble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArrayDouble)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void ArrayDouble::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ArrayDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayDouble::CopyFrom(const ArrayDouble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArrayDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayDouble::IsInitialized() const {
  return true;
}

void ArrayDouble::InternalSwap(ArrayDouble* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArrayDouble::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ArrayString::InitAsDefaultInstance() {
}
class ArrayString::_Internal {
 public:
};

ArrayString::ArrayString(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ArrayString)
}
ArrayString::ArrayString(const ArrayString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ArrayString)
}

void ArrayString::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ArrayString_data_2eproto.base);
}

ArrayString::~ArrayString() {
  // @@protoc_insertion_point(destructor:ArrayString)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ArrayString::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ArrayString::ArenaDtor(void* object) {
  ArrayString* _this = reinterpret_cast< ArrayString* >(object);
  (void)_this;
}
void ArrayString::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArrayString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArrayString& ArrayString::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArrayString_data_2eproto.base);
  return *internal_default_instance();
}


void ArrayString::Clear() {
// @@protoc_insertion_point(message_clear_start:ArrayString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArrayString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_data();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ArrayString.data"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArrayString::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ArrayString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string data = 1;
  for (int i = 0, n = this->_internal_data_size(); i < n; i++) {
    const auto& s = this->_internal_data(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ArrayString.data");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArrayString)
  return target;
}

size_t ArrayString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArrayString)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string data = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(data_.size());
  for (int i = 0, n = data_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      data_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArrayString::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ArrayString)
  GOOGLE_DCHECK_NE(&from, this);
  const ArrayString* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArrayString>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ArrayString)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ArrayString)
    MergeFrom(*source);
  }
}

void ArrayString::MergeFrom(const ArrayString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArrayString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void ArrayString::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ArrayString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayString::CopyFrom(const ArrayString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArrayString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayString::IsInitialized() const {
  return true;
}

void ArrayString::InternalSwap(ArrayString* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArrayString::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ArrayValue::InitAsDefaultInstance() {
}
class ArrayValue::_Internal {
 public:
};

ArrayValue::ArrayValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ArrayValue)
}
ArrayValue::ArrayValue(const ArrayValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ArrayValue)
}

void ArrayValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ArrayValue_data_2eproto.base);
}

ArrayValue::~ArrayValue() {
  // @@protoc_insertion_point(destructor:ArrayValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ArrayValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ArrayValue::ArenaDtor(void* object) {
  ArrayValue* _this = reinterpret_cast< ArrayValue* >(object);
  (void)_this;
}
void ArrayValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArrayValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArrayValue& ArrayValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArrayValue_data_2eproto.base);
  return *internal_default_instance();
}


void ArrayValue::Clear() {
// @@protoc_insertion_point(message_clear_start:ArrayValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArrayValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .context_value data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArrayValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ArrayValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .context_value data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArrayValue)
  return target;
}

size_t ArrayValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArrayValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .context_value data = 1;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArrayValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ArrayValue)
  GOOGLE_DCHECK_NE(&from, this);
  const ArrayValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArrayValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ArrayValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ArrayValue)
    MergeFrom(*source);
  }
}

void ArrayValue::MergeFrom(const ArrayValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArrayValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void ArrayValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ArrayValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayValue::CopyFrom(const ArrayValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArrayValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayValue::IsInitialized() const {
  return true;
}

void ArrayValue::InternalSwap(ArrayValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArrayValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

MapString_DataEntry_DoNotUse::MapString_DataEntry_DoNotUse() {}
MapString_DataEntry_DoNotUse::MapString_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MapString_DataEntry_DoNotUse::MergeFrom(const MapString_DataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MapString_DataEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void MapString_DataEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void MapString::InitAsDefaultInstance() {
}
class MapString::_Internal {
 public:
};

MapString::MapString(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MapString)
}
MapString::MapString(const MapString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.MergeFrom(from.data_);
  // @@protoc_insertion_point(copy_constructor:MapString)
}

void MapString::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ArrayValue_data_2eproto.base);
}

MapString::~MapString() {
  // @@protoc_insertion_point(destructor:MapString)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MapString::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MapString::ArenaDtor(void* object) {
  MapString* _this = reinterpret_cast< MapString* >(object);
  (void)_this;
}
void MapString::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MapString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapString& MapString::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArrayValue_data_2eproto.base);
  return *internal_default_instance();
}


void MapString::Clear() {
// @@protoc_insertion_point(message_clear_start:MapString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .context_value> data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapString::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MapString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .context_value> data = 1;
  if (!this->_internal_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::context_value >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "MapString.DataEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::context_value >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::context_value >::const_iterator
          it = this->_internal_data().begin();
          it != this->_internal_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MapString_DataEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::context_value >::const_iterator
          it = this->_internal_data().begin();
          it != this->_internal_data().end(); ++it) {
        target = MapString_DataEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MapString)
  return target;
}

size_t MapString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MapString)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .context_value> data = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::context_value >::const_iterator
      it = this->_internal_data().begin();
      it != this->_internal_data().end(); ++it) {
    total_size += MapString_DataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapString::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MapString)
  GOOGLE_DCHECK_NE(&from, this);
  const MapString* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapString>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MapString)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MapString)
    MergeFrom(*source);
  }
}

void MapString::MergeFrom(const MapString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MapString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void MapString::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MapString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapString::CopyFrom(const MapString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MapString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapString::IsInitialized() const {
  return true;
}

void MapString::InternalSwap(MapString* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapString::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void context_value::InitAsDefaultInstance() {
  ::_context_value_default_instance_.bool__ = false;
  ::_context_value_default_instance_.float__ = 0;
  ::_context_value_default_instance_.double__ = 0;
  ::_context_value_default_instance_.uint32_ = 0u;
  ::_context_value_default_instance_.uint64_ = PROTOBUF_ULONGLONG(0);
  ::_context_value_default_instance_.int32_ = 0;
  ::_context_value_default_instance_.int64_ = PROTOBUF_LONGLONG(0);
  ::_context_value_default_instance_.sint32_ = 0;
  ::_context_value_default_instance_.sint64_ = PROTOBUF_LONGLONG(0);
  ::_context_value_default_instance_.fixed32_ = 0u;
  ::_context_value_default_instance_.fixed64_ = PROTOBUF_ULONGLONG(0);
  ::_context_value_default_instance_.sfixed32_ = 0;
  ::_context_value_default_instance_.sfixed64_ = PROTOBUF_LONGLONG(0);
  ::_context_value_default_instance_.string_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::_context_value_default_instance_.bytes_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::_context_value_default_instance_.array_int64_ = const_cast< ::ArrayInt64*>(
      ::ArrayInt64::internal_default_instance());
  ::_context_value_default_instance_.array_uint64_ = const_cast< ::ArrayUint64*>(
      ::ArrayUint64::internal_default_instance());
  ::_context_value_default_instance_.array_double_ = const_cast< ::ArrayDouble*>(
      ::ArrayDouble::internal_default_instance());
  ::_context_value_default_instance_.array_string_ = const_cast< ::ArrayString*>(
      ::ArrayString::internal_default_instance());
  ::_context_value_default_instance_.array_value_ = const_cast< ::ArrayValue*>(
      ::ArrayValue::internal_default_instance());
  ::_context_value_default_instance_.map_string_ = const_cast< ::MapString*>(
      ::MapString::internal_default_instance());
}
class context_value::_Internal {
 public:
  static const ::ArrayInt64& array_int64(const context_value* msg);
  static const ::ArrayUint64& array_uint64(const context_value* msg);
  static const ::ArrayDouble& array_double(const context_value* msg);
  static const ::ArrayString& array_string(const context_value* msg);
  static const ::ArrayValue& array_value(const context_value* msg);
  static const ::MapString& map_string(const context_value* msg);
};

const ::ArrayInt64&
context_value::_Internal::array_int64(const context_value* msg) {
  return *msg->value_type_.array_int64_;
}
const ::ArrayUint64&
context_value::_Internal::array_uint64(const context_value* msg) {
  return *msg->value_type_.array_uint64_;
}
const ::ArrayDouble&
context_value::_Internal::array_double(const context_value* msg) {
  return *msg->value_type_.array_double_;
}
const ::ArrayString&
context_value::_Internal::array_string(const context_value* msg) {
  return *msg->value_type_.array_string_;
}
const ::ArrayValue&
context_value::_Internal::array_value(const context_value* msg) {
  return *msg->value_type_.array_value_;
}
const ::MapString&
context_value::_Internal::map_string(const context_value* msg) {
  return *msg->value_type_.map_string_;
}
void context_value::set_allocated_array_int64(::ArrayInt64* array_int64) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value_type();
  if (array_int64) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(array_int64);
    if (message_arena != submessage_arena) {
      array_int64 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, array_int64, submessage_arena);
    }
    set_has_array_int64();
    value_type_.array_int64_ = array_int64;
  }
  // @@protoc_insertion_point(field_set_allocated:context_value.array_int64)
}
void context_value::set_allocated_array_uint64(::ArrayUint64* array_uint64) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value_type();
  if (array_uint64) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(array_uint64);
    if (message_arena != submessage_arena) {
      array_uint64 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, array_uint64, submessage_arena);
    }
    set_has_array_uint64();
    value_type_.array_uint64_ = array_uint64;
  }
  // @@protoc_insertion_point(field_set_allocated:context_value.array_uint64)
}
void context_value::set_allocated_array_double(::ArrayDouble* array_double) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value_type();
  if (array_double) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(array_double);
    if (message_arena != submessage_arena) {
      array_double = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, array_double, submessage_arena);
    }
    set_has_array_double();
    value_type_.array_double_ = array_double;
  }
  // @@protoc_insertion_point(field_set_allocated:context_value.array_double)
}
void context_value::set_allocated_array_string(::ArrayString* array_string) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value_type();
  if (array_string) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(array_string);
    if (message_arena != submessage_arena) {
      array_string = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, array_string, submessage_arena);
    }
    set_has_array_string();
    value_type_.array_string_ = array_string;
  }
  // @@protoc_insertion_point(field_set_allocated:context_value.array_string)
}
void context_value::set_allocated_array_value(::ArrayValue* array_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value_type();
  if (array_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(array_value);
    if (message_arena != submessage_arena) {
      array_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, array_value, submessage_arena);
    }
    set_has_array_value();
    value_type_.array_value_ = array_value;
  }
  // @@protoc_insertion_point(field_set_allocated:context_value.array_value)
}
void context_value::set_allocated_map_string(::MapString* map_string) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value_type();
  if (map_string) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(map_string);
    if (message_arena != submessage_arena) {
      map_string = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_string, submessage_arena);
    }
    set_has_map_string();
    value_type_.map_string_ = map_string;
  }
  // @@protoc_insertion_point(field_set_allocated:context_value.map_string)
}
context_value::context_value(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:context_value)
}
context_value::context_value(const context_value& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value_type();
  switch (from.value_type_case()) {
    case kBool: {
      _internal_set_bool_(from._internal_bool_());
      break;
    }
    case kFloat: {
      _internal_set_float_(from._internal_float_());
      break;
    }
    case kDouble: {
      _internal_set_double_(from._internal_double_());
      break;
    }
    case kUint32: {
      _internal_set_uint32(from._internal_uint32());
      break;
    }
    case kUint64: {
      _internal_set_uint64(from._internal_uint64());
      break;
    }
    case kInt32: {
      _internal_set_int32(from._internal_int32());
      break;
    }
    case kInt64: {
      _internal_set_int64(from._internal_int64());
      break;
    }
    case kSint32: {
      _internal_set_sint32(from._internal_sint32());
      break;
    }
    case kSint64: {
      _internal_set_sint64(from._internal_sint64());
      break;
    }
    case kFixed32: {
      _internal_set_fixed32(from._internal_fixed32());
      break;
    }
    case kFixed64: {
      _internal_set_fixed64(from._internal_fixed64());
      break;
    }
    case kSfixed32: {
      _internal_set_sfixed32(from._internal_sfixed32());
      break;
    }
    case kSfixed64: {
      _internal_set_sfixed64(from._internal_sfixed64());
      break;
    }
    case kString: {
      _internal_set_string(from._internal_string());
      break;
    }
    case kBytes: {
      _internal_set_bytes(from._internal_bytes());
      break;
    }
    case kArrayInt64: {
      _internal_mutable_array_int64()->::ArrayInt64::MergeFrom(from._internal_array_int64());
      break;
    }
    case kArrayUint64: {
      _internal_mutable_array_uint64()->::ArrayUint64::MergeFrom(from._internal_array_uint64());
      break;
    }
    case kArrayDouble: {
      _internal_mutable_array_double()->::ArrayDouble::MergeFrom(from._internal_array_double());
      break;
    }
    case kArrayString: {
      _internal_mutable_array_string()->::ArrayString::MergeFrom(from._internal_array_string());
      break;
    }
    case kArrayValue: {
      _internal_mutable_array_value()->::ArrayValue::MergeFrom(from._internal_array_value());
      break;
    }
    case kMapString: {
      _internal_mutable_map_string()->::MapString::MergeFrom(from._internal_map_string());
      break;
    }
    case VALUE_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:context_value)
}

void context_value::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ArrayValue_data_2eproto.base);
  clear_has_value_type();
}

context_value::~context_value() {
  // @@protoc_insertion_point(destructor:context_value)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void context_value::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_value_type()) {
    clear_value_type();
  }
}

void context_value::ArenaDtor(void* object) {
  context_value* _this = reinterpret_cast< context_value* >(object);
  (void)_this;
}
void context_value::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void context_value::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const context_value& context_value::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArrayValue_data_2eproto.base);
  return *internal_default_instance();
}


void context_value::clear_value_type() {
// @@protoc_insertion_point(one_of_clear_start:context_value)
  switch (value_type_case()) {
    case kBool: {
      // No need to clear
      break;
    }
    case kFloat: {
      // No need to clear
      break;
    }
    case kDouble: {
      // No need to clear
      break;
    }
    case kUint32: {
      // No need to clear
      break;
    }
    case kUint64: {
      // No need to clear
      break;
    }
    case kInt32: {
      // No need to clear
      break;
    }
    case kInt64: {
      // No need to clear
      break;
    }
    case kSint32: {
      // No need to clear
      break;
    }
    case kSint64: {
      // No need to clear
      break;
    }
    case kFixed32: {
      // No need to clear
      break;
    }
    case kFixed64: {
      // No need to clear
      break;
    }
    case kSfixed32: {
      // No need to clear
      break;
    }
    case kSfixed64: {
      // No need to clear
      break;
    }
    case kString: {
      value_type_.string_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kBytes: {
      value_type_.bytes_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kArrayInt64: {
      if (GetArena() == nullptr) {
        delete value_type_.array_int64_;
      }
      break;
    }
    case kArrayUint64: {
      if (GetArena() == nullptr) {
        delete value_type_.array_uint64_;
      }
      break;
    }
    case kArrayDouble: {
      if (GetArena() == nullptr) {
        delete value_type_.array_double_;
      }
      break;
    }
    case kArrayString: {
      if (GetArena() == nullptr) {
        delete value_type_.array_string_;
      }
      break;
    }
    case kArrayValue: {
      if (GetArena() == nullptr) {
        delete value_type_.array_value_;
      }
      break;
    }
    case kMapString: {
      if (GetArena() == nullptr) {
        delete value_type_.map_string_;
      }
      break;
    }
    case VALUE_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_TYPE_NOT_SET;
}


void context_value::Clear() {
// @@protoc_insertion_point(message_clear_start:context_value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* context_value::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool bool = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_bool_(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float float = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _internal_set_float_(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double double = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _internal_set_double_(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 uint32 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _internal_set_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 uint64 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 int32 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _internal_set_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 int64 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _internal_set_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 sint32 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _internal_set_sint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 sint64 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _internal_set_sint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // fixed32 fixed32 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _internal_set_fixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // fixed64 fixed64 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _internal_set_fixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // sfixed32 sfixed32 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _internal_set_sfixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      // sfixed64 sfixed64 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _internal_set_sfixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // string string = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "context_value.string"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes bytes = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ArrayInt64 array_int64 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_array_int64(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ArrayUint64 array_uint64 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_array_uint64(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ArrayDouble array_double = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_array_double(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ArrayString array_string = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_array_string(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ArrayValue array_value = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_array_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MapString map_string = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_string(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* context_value::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:context_value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool bool = 1;
  if (_internal_has_bool_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bool_(), target);
  }

  // float float = 2;
  if (_internal_has_float_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_float_(), target);
  }

  // double double = 3;
  if (_internal_has_double_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_double_(), target);
  }

  // uint32 uint32 = 4;
  if (_internal_has_uint32()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_uint32(), target);
  }

  // uint64 uint64 = 5;
  if (_internal_has_uint64()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_uint64(), target);
  }

  // int32 int32 = 6;
  if (_internal_has_int32()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_int32(), target);
  }

  // int64 int64 = 7;
  if (_internal_has_int64()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_int64(), target);
  }

  // sint32 sint32 = 8;
  if (_internal_has_sint32()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(8, this->_internal_sint32(), target);
  }

  // sint64 sint64 = 9;
  if (_internal_has_sint64()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(9, this->_internal_sint64(), target);
  }

  // fixed32 fixed32 = 10;
  if (_internal_has_fixed32()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(10, this->_internal_fixed32(), target);
  }

  // fixed64 fixed64 = 11;
  if (_internal_has_fixed64()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(11, this->_internal_fixed64(), target);
  }

  // sfixed32 sfixed32 = 12;
  if (_internal_has_sfixed32()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(12, this->_internal_sfixed32(), target);
  }

  // sfixed64 sfixed64 = 13;
  if (_internal_has_sfixed64()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(13, this->_internal_sfixed64(), target);
  }

  // string string = 14;
  if (_internal_has_string()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string().data(), static_cast<int>(this->_internal_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "context_value.string");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_string(), target);
  }

  // bytes bytes = 15;
  if (_internal_has_bytes()) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_bytes(), target);
  }

  // .ArrayInt64 array_int64 = 16;
  if (_internal_has_array_int64()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::array_int64(this), target, stream);
  }

  // .ArrayUint64 array_uint64 = 17;
  if (_internal_has_array_uint64()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::array_uint64(this), target, stream);
  }

  // .ArrayDouble array_double = 18;
  if (_internal_has_array_double()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::array_double(this), target, stream);
  }

  // .ArrayString array_string = 19;
  if (_internal_has_array_string()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::array_string(this), target, stream);
  }

  // .ArrayValue array_value = 20;
  if (_internal_has_array_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::array_value(this), target, stream);
  }

  // .MapString map_string = 21;
  if (_internal_has_map_string()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::map_string(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:context_value)
  return target;
}

size_t context_value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:context_value)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_type_case()) {
    // bool bool = 1;
    case kBool: {
      total_size += 1 + 1;
      break;
    }
    // float float = 2;
    case kFloat: {
      total_size += 1 + 4;
      break;
    }
    // double double = 3;
    case kDouble: {
      total_size += 1 + 8;
      break;
    }
    // uint32 uint32 = 4;
    case kUint32: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uint32());
      break;
    }
    // uint64 uint64 = 5;
    case kUint64: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_uint64());
      break;
    }
    // int32 int32 = 6;
    case kInt32: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_int32());
      break;
    }
    // int64 int64 = 7;
    case kInt64: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_int64());
      break;
    }
    // sint32 sint32 = 8;
    case kSint32: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_sint32());
      break;
    }
    // sint64 sint64 = 9;
    case kSint64: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
          this->_internal_sint64());
      break;
    }
    // fixed32 fixed32 = 10;
    case kFixed32: {
      total_size += 1 + 4;
      break;
    }
    // fixed64 fixed64 = 11;
    case kFixed64: {
      total_size += 1 + 8;
      break;
    }
    // sfixed32 sfixed32 = 12;
    case kSfixed32: {
      total_size += 1 + 4;
      break;
    }
    // sfixed64 sfixed64 = 13;
    case kSfixed64: {
      total_size += 1 + 8;
      break;
    }
    // string string = 14;
    case kString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string());
      break;
    }
    // bytes bytes = 15;
    case kBytes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bytes());
      break;
    }
    // .ArrayInt64 array_int64 = 16;
    case kArrayInt64: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_type_.array_int64_);
      break;
    }
    // .ArrayUint64 array_uint64 = 17;
    case kArrayUint64: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_type_.array_uint64_);
      break;
    }
    // .ArrayDouble array_double = 18;
    case kArrayDouble: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_type_.array_double_);
      break;
    }
    // .ArrayString array_string = 19;
    case kArrayString: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_type_.array_string_);
      break;
    }
    // .ArrayValue array_value = 20;
    case kArrayValue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_type_.array_value_);
      break;
    }
    // .MapString map_string = 21;
    case kMapString: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_type_.map_string_);
      break;
    }
    case VALUE_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void context_value::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:context_value)
  GOOGLE_DCHECK_NE(&from, this);
  const context_value* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<context_value>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:context_value)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:context_value)
    MergeFrom(*source);
  }
}

void context_value::MergeFrom(const context_value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:context_value)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_type_case()) {
    case kBool: {
      _internal_set_bool_(from._internal_bool_());
      break;
    }
    case kFloat: {
      _internal_set_float_(from._internal_float_());
      break;
    }
    case kDouble: {
      _internal_set_double_(from._internal_double_());
      break;
    }
    case kUint32: {
      _internal_set_uint32(from._internal_uint32());
      break;
    }
    case kUint64: {
      _internal_set_uint64(from._internal_uint64());
      break;
    }
    case kInt32: {
      _internal_set_int32(from._internal_int32());
      break;
    }
    case kInt64: {
      _internal_set_int64(from._internal_int64());
      break;
    }
    case kSint32: {
      _internal_set_sint32(from._internal_sint32());
      break;
    }
    case kSint64: {
      _internal_set_sint64(from._internal_sint64());
      break;
    }
    case kFixed32: {
      _internal_set_fixed32(from._internal_fixed32());
      break;
    }
    case kFixed64: {
      _internal_set_fixed64(from._internal_fixed64());
      break;
    }
    case kSfixed32: {
      _internal_set_sfixed32(from._internal_sfixed32());
      break;
    }
    case kSfixed64: {
      _internal_set_sfixed64(from._internal_sfixed64());
      break;
    }
    case kString: {
      _internal_set_string(from._internal_string());
      break;
    }
    case kBytes: {
      _internal_set_bytes(from._internal_bytes());
      break;
    }
    case kArrayInt64: {
      _internal_mutable_array_int64()->::ArrayInt64::MergeFrom(from._internal_array_int64());
      break;
    }
    case kArrayUint64: {
      _internal_mutable_array_uint64()->::ArrayUint64::MergeFrom(from._internal_array_uint64());
      break;
    }
    case kArrayDouble: {
      _internal_mutable_array_double()->::ArrayDouble::MergeFrom(from._internal_array_double());
      break;
    }
    case kArrayString: {
      _internal_mutable_array_string()->::ArrayString::MergeFrom(from._internal_array_string());
      break;
    }
    case kArrayValue: {
      _internal_mutable_array_value()->::ArrayValue::MergeFrom(from._internal_array_value());
      break;
    }
    case kMapString: {
      _internal_mutable_map_string()->::MapString::MergeFrom(from._internal_map_string());
      break;
    }
    case VALUE_TYPE_NOT_SET: {
      break;
    }
  }
}

void context_value::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:context_value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void context_value::CopyFrom(const context_value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:context_value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool context_value::IsInitialized() const {
  return true;
}

void context_value::InternalSwap(context_value* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_type_, other->value_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata context_value::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

MatchRuleReq_ContextMapEntry_DoNotUse::MatchRuleReq_ContextMapEntry_DoNotUse() {}
MatchRuleReq_ContextMapEntry_DoNotUse::MatchRuleReq_ContextMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MatchRuleReq_ContextMapEntry_DoNotUse::MergeFrom(const MatchRuleReq_ContextMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MatchRuleReq_ContextMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void MatchRuleReq_ContextMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void MatchRuleReq::InitAsDefaultInstance() {
}
class MatchRuleReq::_Internal {
 public:
};

MatchRuleReq::MatchRuleReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  context_map_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MatchRuleReq)
}
MatchRuleReq::MatchRuleReq(const MatchRuleReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  context_map_.MergeFrom(from.context_map_);
  // @@protoc_insertion_point(copy_constructor:MatchRuleReq)
}

void MatchRuleReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MatchRuleReq_data_2eproto.base);
}

MatchRuleReq::~MatchRuleReq() {
  // @@protoc_insertion_point(destructor:MatchRuleReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MatchRuleReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MatchRuleReq::ArenaDtor(void* object) {
  MatchRuleReq* _this = reinterpret_cast< MatchRuleReq* >(object);
  (void)_this;
}
void MatchRuleReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MatchRuleReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MatchRuleReq& MatchRuleReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchRuleReq_data_2eproto.base);
  return *internal_default_instance();
}


void MatchRuleReq::Clear() {
// @@protoc_insertion_point(message_clear_start:MatchRuleReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  context_map_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchRuleReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .context_value> context_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&context_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatchRuleReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MatchRuleReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .context_value> context_map = 1;
  if (!this->_internal_context_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::context_value >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "MatchRuleReq.ContextMapEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_context_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_context_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::context_value >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::context_value >::const_iterator
          it = this->_internal_context_map().begin();
          it != this->_internal_context_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MatchRuleReq_ContextMapEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::context_value >::const_iterator
          it = this->_internal_context_map().begin();
          it != this->_internal_context_map().end(); ++it) {
        target = MatchRuleReq_ContextMapEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MatchRuleReq)
  return target;
}

size_t MatchRuleReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MatchRuleReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .context_value> context_map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_context_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::context_value >::const_iterator
      it = this->_internal_context_map().begin();
      it != this->_internal_context_map().end(); ++it) {
    total_size += MatchRuleReq_ContextMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchRuleReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MatchRuleReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchRuleReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchRuleReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MatchRuleReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MatchRuleReq)
    MergeFrom(*source);
  }
}

void MatchRuleReq::MergeFrom(const MatchRuleReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MatchRuleReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  context_map_.MergeFrom(from.context_map_);
}

void MatchRuleReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MatchRuleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchRuleReq::CopyFrom(const MatchRuleReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MatchRuleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchRuleReq::IsInitialized() const {
  return true;
}

void MatchRuleReq::InternalSwap(MatchRuleReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  context_map_.Swap(&other->context_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchRuleReq::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ArrayInt64* Arena::CreateMaybeMessage< ::ArrayInt64 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArrayInt64 >(arena);
}
template<> PROTOBUF_NOINLINE ::ArrayUint64* Arena::CreateMaybeMessage< ::ArrayUint64 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArrayUint64 >(arena);
}
template<> PROTOBUF_NOINLINE ::ArrayDouble* Arena::CreateMaybeMessage< ::ArrayDouble >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArrayDouble >(arena);
}
template<> PROTOBUF_NOINLINE ::ArrayString* Arena::CreateMaybeMessage< ::ArrayString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArrayString >(arena);
}
template<> PROTOBUF_NOINLINE ::ArrayValue* Arena::CreateMaybeMessage< ::ArrayValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ArrayValue >(arena);
}
template<> PROTOBUF_NOINLINE ::MapString_DataEntry_DoNotUse* Arena::CreateMaybeMessage< ::MapString_DataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MapString_DataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::MapString* Arena::CreateMaybeMessage< ::MapString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MapString >(arena);
}
template<> PROTOBUF_NOINLINE ::context_value* Arena::CreateMaybeMessage< ::context_value >(Arena* arena) {
  return Arena::CreateMessageInternal< ::context_value >(arena);
}
template<> PROTOBUF_NOINLINE ::MatchRuleReq_ContextMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::MatchRuleReq_ContextMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MatchRuleReq_ContextMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::MatchRuleReq* Arena::CreateMaybeMessage< ::MatchRuleReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MatchRuleReq >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
